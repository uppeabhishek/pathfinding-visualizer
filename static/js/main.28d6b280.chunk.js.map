{"version":3,"sources":["components/header/styles.ts","components/header/index.tsx","actions/index.ts","actions/types.ts","components/graph/styles.ts","commonUtilities.ts","MazeGenerationAlgorithms/RecursiveBacktracker.ts","MazeGenerationAlgorithms/RandomizedPrims.ts","MazeGenerationAlgorithms/RecursiveDivision.ts","DataStructures/Queue.ts","PathFindingAlgorithms/index.tsx","PathFindingAlgorithms/BreathFirstSearch.ts","PathFindingAlgorithms/HeapAndMap.ts","PathFindingAlgorithms/Dijkstras/HeapAndMap.ts","PathFindingAlgorithms/Dijkstras/Dijkstras.ts","PathFindingAlgorithms/A*/HeapAndMap.ts","PathFindingAlgorithms/A*/A*.ts","components/graph/nodes.tsx","components/graph/index.tsx","components/Info/index.tsx","AppStyles.ts","App.tsx","serviceWorker.ts","reducers/globals.ts","reducers/index.ts","store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","header","padding","maxWidth","overflowX","toolbar","color","flexDirection","display","marginRight","Header","dispatch","useDispatch","algorithm","useSelector","state","globals","mazeType","graphAlgorithms","useRef","name","value","mazeGenerationAlgorithms","classes","AppBar","className","position","Toolbar","Typography","variant","onClick","window","location","reload","InputLabel","id","Select","labelId","onChange","event","type","changeAlgorithm","target","current","map","algo","MenuItem","key","changeMazeType","Button","gutterBottom","Slider","aria-labelledby","defaultValue","getAriaValueText","toString","marks","max","min","step","valueLabelDisplay","root","flex","from","transform","to","table","overflow","borderSpacing","textAlign","animation","border","backgroundColor","getRandom","Math","floor","random","RecursiveBackTracker","array","startIndex","this","i","j","maxi","maxj","visited","neighbours","temp","tempString","has","push","length","randomNeighbour","currentCell","trNodes","trLength","tdLength","children","classList","add","stack","Set","plotCorners","pop","getRandomNeighbour","removeWalls","RandomizedPrims","maxRow","maxCol","res","x","y","walls","isValid","Array","fill","pushNeighboursToWalls","cnt","console","log","wallIndex","splice","left","right","top","bottom","randomPrims","RecursiveDivision","isHorizontalByUser","isHorizontal","undefined","width","height","getOrientation","currentX","currentY","passageX","passageY","e","divideGrid","arr","Queue","elements","element","isEmpty","shift","PathFindingAlgorithm","grid","source","destination","rows","cols","maxInt","Number","MAX_SAFE_INTEGER","shortestRoute","result","getParent","coordinates","getCoordinates","Node","distance","parent","BreathFirstSearch","visitedTemp","obj","row","col","contains","node","queue","enqueue","isPathFound","front","dequeue","pathNodes","getShortestRoute","forEach","ele","GenericHeapAndMap","index","swapIndex","getDistance","parentIndex","swapElements","indexToSwap","tempIndex","getArrayIndex","setArrayIndex","leftRightIndex","isWall","arrayIndex","HeapAndMap","dict","getKeyNotation","firstElement","lastElement","leftChildIndex","rightChildIndex","compareAndSwapElements","Dijkstras","q","neigbours","getNeigbourCoordinates","getNode","containsWall","resultNode","heapMap","currentNode","extractMin","getNeighbours","neighbour","setDistance","setParent","changePosition","f","g","h","openList","closedList","getf","AStar","getOpenListNode","goalCell","openListNode","getg","abs","getClosedListNode","setg","seth","setf","addClosedListNode","Nodes","trHeight","trWidth","tdRowListener","currentTargetClassList","currentTarget","remove","shouldMouseEnter","onMouseDown","onMouseUp","onMouseEnter","borderRadius","ColNodes","isMiddle","startNode","endNode","text","data-id","style","RowNodes","useEffect","bodyRef","plotOnGraph","documentSource","document","querySelector","documentDestination","dataset","split","parseInt","plotShortestRoute","useMemo","ref","Graph","graphRef","useState","heightWidth","setHeightWidth","clientHeight","clientWidth","Info","main","App","Boolean","hostname","match","initialState","animationSpeed","clearRoute","clearBoard","clearWeights","vAlgorithm","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28d6b280.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        header: {\n            padding: \"10px\",\n            maxWidth: \"100%\",\n            overflowX: \"auto\"\n        },\n        toolbar: {\n            \"& > *\": {\n                color: \"white\",\n                flexDirection: \"column\",\n                display: \"flex\",\n                marginRight: \"40px\"\n            }\n        }\n    })\n);\n","import React, { FunctionComponent, ChangeEvent, useRef } from \"react\";\nimport {\n    Slider,\n    AppBar,\n    Toolbar,\n    Typography,\n    Select,\n    MenuItem,\n    InputLabel,\n    Button\n} from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useStyles } from \"./styles\";\nimport { changeAlgorithm, changeMazeType } from \"../../actions\";\nimport { RootState } from \"../../reducers\";\n\nconst Header: FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    const algorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    const toggleGraphAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        dispatch(changeAlgorithm(event.target.value as string));\n    };\n\n    const mazeType = useSelector((state: RootState) => state.globals.mazeType);\n\n    const toggleMazeGenerationAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        dispatch(changeMazeType(event.target.value as string));\n    };\n\n    const graphAlgorithms = useRef([\n        {\n            name: \"Breath First Search\",\n            value: \"BFS\"\n        },\n        {\n            name: \"Dijkstra's\",\n            value: \"Dijkstra's\"\n        },\n        {\n            name: \"A*\",\n            value: \"AStar\"\n        }\n    ]);\n\n    const mazeGenerationAlgorithms = useRef([\n        {\n            name: \"Recursive Division\",\n            value: \"recursiveDivision\"\n        }\n    ]);\n\n    function getAnimationSpeed(value: number) {\n        return value.toString();\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <AppBar className={classes.header} position=\"static\">\n                <Toolbar className={classes.toolbar}>\n                    <Typography\n                        className=\"cursor-pointer\"\n                        variant=\"h4\"\n                        onClick={() => window.location.reload()}\n                    >\n                        Pathfinding Visualizer\n                    </Typography>\n\n                    <div className=\"graphAlgorithms\">\n                        <InputLabel id=\"graphAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Algorithms</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"graphAlgorithms\"\n                            labelId=\"graphAlgorithmsLabel\"\n                            value={algorithm}\n                            onChange={toggleGraphAlgorithmFunc}\n                        >\n                            {graphAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <div className=\"mazeGenerationAlgorithms\">\n                        <InputLabel id=\"mazeGenerationAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Mazes</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"mazeGenerationAlgorithms\"\n                            labelId=\"mazeGenerationAlgorithmsLabel\"\n                            value={mazeType}\n                            onChange={toggleMazeGenerationAlgorithmFunc}\n                        >\n                            {mazeGenerationAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <Button variant=\"contained\">Visualize</Button>\n\n                    <div>\n                        <Typography gutterBottom={true} id=\"animationSpeedSlider\">\n                            Animation Speed\n                        </Typography>\n                        <Slider\n                            aria-labelledby=\"animationSpeedSliderr\"\n                            defaultValue={30}\n                            getAriaValueText={getAnimationSpeed}\n                            marks={true}\n                            max={100}\n                            min={10}\n                            step={10}\n                            valueLabelDisplay=\"auto\"\n                        />\n                    </div>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Route\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Weights\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Board\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default Header;\n","import {\n    AlgorithmType,\n    GlobalTypes,\n    CHANGE_ALGORITHM,\n    MazeType,\n    CHANGE_MAZE_TYPE,\n    AnimationSpeed,\n    CHANGE_ANIMATION_SPEED,\n    CLEAR_ROUTE,\n    Route,\n    Weights,\n    CLEAR_WEIGHTS,\n    Board,\n    CLEAR_BOARD,\n    VISUALIZE_ALGORITHM,\n    VAlgorithm\n} from \"./types\";\n\nexport const changeAlgorithm = (algorithm: AlgorithmType): GlobalTypes => ({\n    algorithm,\n    type: CHANGE_ALGORITHM\n});\n\nexport const changeMazeType = (mazeType: MazeType): GlobalTypes => ({\n    mazeType,\n    type: CHANGE_MAZE_TYPE\n});\n\nexport const changeAnimationSpeed = (animationSpeed: AnimationSpeed): GlobalTypes => ({\n    animationSpeed,\n    type: CHANGE_ANIMATION_SPEED\n});\n\nexport const toggleClearRoute = (clearRoute: Route): GlobalTypes => ({\n    clearRoute,\n    type: CLEAR_ROUTE\n});\n\nexport const toggleClearWeights = (clearWeights: Weights): GlobalTypes => ({\n    clearWeights,\n    type: CLEAR_WEIGHTS\n});\n\nexport const toggleClearBoard = (clearBoard: Board): GlobalTypes => ({\n    clearBoard,\n    type: CLEAR_BOARD\n});\n\nexport const toggleVisualizeAlgorithm = (vAlgorithm: VAlgorithm): GlobalTypes => ({\n    vAlgorithm,\n    type: VISUALIZE_ALGORITHM\n});\n","export const CHANGE_ALGORITHM = \"CHANGE_ALGORITHM\";\nexport const CHANGE_MAZE_TYPE = \"CHANGE_MAZE_TYPE\";\nexport const CHANGE_ANIMATION_SPEED = \"CHANGE_ANIMATION_SPEED\";\nexport const CLEAR_ROUTE = \"CLEAR_ROUTE\";\nexport const CLEAR_WEIGHTS = \"CLEAR_WEIGHTS\";\nexport const CLEAR_BOARD = \"CLEAR_BOARD\";\nexport const VISUALIZE_ALGORITHM = \"VISUALIZE_ALGORITHM\";\n\nexport type AlgorithmType = string;\nexport type MazeType = string;\nexport type AnimationSpeed = number;\nexport type Route = boolean;\nexport type Weights = boolean;\nexport type Board = boolean;\nexport type VAlgorithm = boolean;\n\nexport interface ChangeAlgorithm {\n    type: typeof CHANGE_ALGORITHM;\n    algorithm: AlgorithmType;\n}\n\nexport interface ChangeMazeType {\n    type: typeof CHANGE_MAZE_TYPE;\n    mazeType: MazeType;\n}\n\nexport interface ChangeAnimationSpeed {\n    type: typeof CHANGE_ANIMATION_SPEED;\n    animationSpeed: AnimationSpeed;\n}\n\nexport interface ClearRoute {\n    type: typeof CLEAR_ROUTE;\n    clearRoute: Route;\n}\n\nexport interface ClearWeights {\n    type: typeof CLEAR_WEIGHTS;\n    clearWeights: Weights;\n}\n\nexport interface ClearBoard {\n    type: typeof CLEAR_BOARD;\n    clearBoard: Board;\n}\n\nexport interface VisualizeAlgorithm {\n    type: typeof VISUALIZE_ALGORITHM;\n    vAlgorithm: VAlgorithm;\n}\n\nexport type GlobalTypes =\n    | ChangeAlgorithm\n    | ChangeMazeType\n    | ChangeAnimationSpeed\n    | ClearRoute\n    | ClearWeights\n    | ClearBoard\n    | VisualizeAlgorithm;\n\nexport interface GlobalState {\n    algorithm: AlgorithmType;\n    mazeType: MazeType;\n    animationSpeed: AnimationSpeed;\n    clearWeights: Weights;\n    clearBoard: Board;\n    clearRoute: Route;\n    vAlgorithm: VAlgorithm;\n}\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flex: 1\n        },\n        \"@keyframes tdAnimation\": {\n            from: {\n                transform: \"scaleX(0)\"\n            },\n            to: {\n                transform: \"scaleX(1)\"\n            }\n        },\n        table: {\n            overflow: \"hidden\",\n            borderSpacing: 0,\n            \"& td\": {\n                textAlign: \"center\",\n                color: \"white\",\n                animation: \"$tdAnimation 1500ms\"\n            },\n            \"& td.wall\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                border: \"none !important\",\n                backgroundColor: \"#61dafb\"\n            },\n            \"& td.route\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                border: \"none !important\",\n                backgroundColor: \"lightgreen\"\n            },\n            \"& td.source\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                backgroundColor: \"green\"\n            },\n            \"& td.destination\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                backgroundColor: \"red\"\n            }\n        }\n    })\n);\n","export const getRandom = (min: number, max: number) =>\n    Math.floor(Math.random() * (max - min + 1)) + min;\n","import { getRandom } from \"../commonUtilities\";\n\nexport default class RecursiveBackTracker {\n    private readonly array: HTMLTableSectionElement;\n\n    private readonly startIndex: [number, number];\n\n    constructor(array: HTMLTableSectionElement, startIndex: [number, number]) {\n        this.array = array;\n        this.startIndex = startIndex;\n    }\n\n    getRandomNeighbour(i: number, j: number, maxi: number, maxj: number, visited: Set<string>) {\n        const neighbours: Array<any> = [];\n\n        if (i - 2 > 0) {\n            const temp = [i - 2, j];\n            const tempString = temp.toString();\n\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (i + 2 < maxi) {\n            const temp = [i + 2, j];\n            const tempString = temp.toString();\n\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (j - 2 > 0) {\n            const temp = [i, j - 2];\n            const tempString = temp.toString();\n\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (j + 2 < maxj) {\n            const temp = [i, j + 2];\n            const tempString = temp.toString();\n\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (!neighbours.length) {\n            return -1;\n        }\n        const randomIndex = getRandom(0, neighbours.length - 1);\n\n        return neighbours[randomIndex];\n    }\n\n    removeWalls(\n        randomNeighbour: [number, number],\n        currentCell: any,\n        trNodes: any,\n        trLength: number,\n        tdLength: number\n    ) {\n        if (randomNeighbour[1] > currentCell[1]) {\n            if (currentCell[1] + 1 < tdLength) {\n                trNodes[currentCell[0]].children[currentCell[1] + 1].classList.add(\"wall\");\n            }\n        } else if (randomNeighbour[0] > currentCell[0]) {\n            if (currentCell[0] + 1 < trLength) {\n                trNodes[currentCell[0] + 1].children[currentCell[1]].classList.add(\"wall\");\n            }\n        } else if (currentCell[1] > randomNeighbour[1]) {\n            if (randomNeighbour[1] + 1 < tdLength) {\n                trNodes[randomNeighbour[0]].children[randomNeighbour[1] + 1].classList.add(\"wall\");\n            }\n        } else if (currentCell[0] > randomNeighbour[0]) {\n            if (randomNeighbour[0] + 1 < trLength) {\n                trNodes[randomNeighbour[0] + 1].children[randomNeighbour[1]].classList.add(\"wall\");\n            }\n        }\n    }\n\n    plotCorners(trNodes: any, trLength: number, tdLength: number) {\n        const min = tdLength > trLength ? trLength : tdLength;\n\n        for (let i = 0; i < tdLength; i++) {\n            trNodes[0].children[i].classList.add(\"wall\");\n            trNodes[trLength - 1].children[i].classList.add(\"wall\");\n        }\n\n        for (let i = 0; i < trLength; i++) {\n            trNodes[i].children[0].classList.add(\"wall\");\n            trNodes[i].children[tdLength - 1].classList.add(\"wall\");\n        }\n    }\n\n    plotOnGraph() {\n        const trNodes = this.array.children;\n        const trLength = trNodes.length;\n        const tdLength = trNodes[0].children.length;\n\n        const stack: Array<any> = [];\n        const visited: Set<string> = new Set([]);\n\n        const i = this.startIndex[0];\n        const j = this.startIndex[1];\n\n        let currentCell = [i, j];\n\n        this.plotCorners(trNodes, trLength, tdLength);\n\n        visited.add(currentCell.toString());\n\n        stack.push(currentCell);\n\n        let isVisited = false;\n\n        while (stack.length) {\n            const temp = stack.pop();\n\n            if (temp) {\n                currentCell = temp;\n                const randomNeighbour = this.getRandomNeighbour(\n                    currentCell[0],\n                    currentCell[1],\n                    trLength,\n                    tdLength,\n                    visited\n                );\n\n                if (randomNeighbour !== -1) {\n                    isVisited = true;\n                    stack.push(currentCell);\n\n                    this.removeWalls(randomNeighbour, currentCell, trNodes, trLength, tdLength);\n\n                    visited.add(randomNeighbour.toString());\n\n                    stack.push(randomNeighbour);\n                }\n            }\n        }\n    }\n}\n","import { getRandom } from \"../commonUtilities\";\n\nexport default class RandomizedPrims {\n    private readonly array: HTMLTableSectionElement;\n\n    private readonly startIndex: [number, number];\n\n    private readonly maxRow: number;\n\n    private readonly maxCol: number;\n\n    private readonly trNodes: HTMLCollectionOf<Element>;\n\n    constructor(array: HTMLTableSectionElement, startIndex: [number, number]) {\n        this.array = array;\n        this.startIndex = startIndex;\n        this.trNodes = this.array.children;\n        this.maxRow = this.trNodes.length;\n        this.maxCol = this.trNodes[0].children.length;\n    }\n\n    isValid(res: Array<[number, number]>, x: number, y: number) {\n        if (x < 0 || y < 0 || x >= this.maxRow || y >= this.maxCol) {\n            return 0;\n        }\n\n        return res[x][y];\n    }\n\n    pushNeighboursToWalls(\n        res: Array<[number, number]>,\n        x: number,\n        y: number,\n        walls: Array<[number, number]>\n    ) {\n        if (this.isValid(res, x - 1, y)) {\n            walls.push([x - 1, y]);\n        }\n        if (this.isValid(res, x + 1, y)) {\n            walls.push([x + 1, y]);\n        }\n        if (this.isValid(res, x, y - 1)) {\n            walls.push([x, y - 1]);\n        }\n        if (this.isValid(res, x, y + 1)) {\n            walls.push([x, y + 1]);\n        }\n    }\n\n    randomPrims() {\n        const res = new Array(this.maxRow);\n        const walls: Array<[number, number]> = [];\n\n        for (let i = 0; i < this.maxRow; i++) {\n            res[i] = new Array(this.maxCol).fill(1);\n        }\n\n        const currentCell = [getRandom(0, this.maxRow - 1), getRandom(0, this.maxCol - 1)];\n\n        const [x, y] = currentCell;\n\n        res[x][y] = 0;\n\n        this.pushNeighboursToWalls(res, x, y, walls);\n\n        let cnt = 0;\n\n        while (walls.length !== 0) {\n            console.log(walls);\n\n            cnt += 1;\n\n            const wallIndex = getRandom(0, walls.length - 1);\n\n            const [x, y] = walls[wallIndex];\n\n            walls.splice(wallIndex, 1);\n\n            const left = this.isValid(res, x - 1, y);\n            const right = this.isValid(res, x + 1, y);\n            const top = this.isValid(res, x, y - 1);\n            const bottom = this.isValid(res, x, y + 1);\n\n            console.log(walls);\n\n            if (!right && left) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x - 1, y, walls);\n            } else if (!left && right) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x + 1, y, walls);\n            } else if (!bottom && top) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x, y - 1, walls);\n            } else if (!top && bottom) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x, y + 1, walls);\n            }\n        }\n        console.log(walls, res, cnt);\n\n        return res;\n    }\n\n    plotOnGraph() {\n        console.log(\"hi\");\n        const trNodes = this.array.children;\n\n        const res = this.randomPrims();\n\n        // Const res = generate({width: this.maxCol, height: this.maxCol});\n\n        // Console.log(res.length, res[0].length, this.maxRow, this.maxCol);\n        for (let i = 0; i < this.maxRow; i++) {\n            for (let j = 0; j < this.maxCol; j++) {\n                if (res[i][j] === 1) {\n                    trNodes[i].children[j].classList.add(\"wall\");\n                }\n            }\n        }\n    }\n}\n","import { getRandom } from \"../commonUtilities\";\n\nexport default class RecursiveDivision {\n    private readonly array: HTMLTableSectionElement;\n\n    private readonly maxRow: number;\n\n    private readonly maxCol: number;\n\n    private readonly trNodes: HTMLCollectionOf<Element>;\n\n    private isHorizontal: boolean;\n\n    private readonly isHorizontalByUser: boolean | undefined;\n\n    constructor(array: HTMLTableSectionElement, isHorizontalByUser?: boolean) {\n        this.array = array;\n        this.trNodes = this.array.children;\n        this.maxRow = this.trNodes.length;\n        this.maxCol = this.trNodes[0].children.length;\n        this.isHorizontalByUser = isHorizontalByUser;\n\n        this.isHorizontal = isHorizontalByUser !== undefined ? isHorizontalByUser : false;\n    }\n\n    getOrientation(width: number, height: number) {\n        if (width < height) {\n            this.isHorizontal = true;\n        } else if (height < width) {\n            this.isHorizontal = false;\n        } else {\n            getRandom(0, 1) === 0 ? (this.isHorizontal = true) : (this.isHorizontal = false);\n        }\n    }\n\n    divideGrid(res: Array<[number, number]>, x: number, y: number, height: number, width: number) {\n        if (width < 2 || height < 2) {\n            return;\n        }\n\n        this.getOrientation(width, height);\n\n        let currentX = this.isHorizontal ? x + getRandom(0, height - 1) : x;\n        let currentY = this.isHorizontal ? y : y + getRandom(0, width - 1);\n\n        const length = this.isHorizontal ? width : height;\n\n        const passageX = this.isHorizontal ? currentX : currentX + getRandom(0, height - 1);\n        const passageY = this.isHorizontal ? currentY + getRandom(0, width - 1) : currentY;\n\n        for (let i = 0; i < length; i++) {\n            if (!(currentX === passageX && currentY === passageY)) {\n                try {\n                    res[currentX][currentY] = 1;\n                } catch (e) {\n                    // Console.log(currentX, currentY);\n                }\n            }\n            if (this.isHorizontal) {\n                currentY += 1;\n            } else {\n                currentX += 1;\n            }\n        }\n\n        if (this.isHorizontal) {\n            const tempX = x;\n            const tempY = y;\n            const tempHeight = this.isHorizontal ? currentX - x : height;\n            const tempWidth = this.isHorizontal ? width : currentY - y;\n\n            // Console.log(x, y, currentX, currentY, width, height);\n\n            /*\n             * Console.log(x, y, currentY, currentX-y);\n             * console.log(x, y+currentX+1, currentY, height - currentX - 1);\n             */\n            if (currentX - y > 0) {\n                this.divideGrid(res, x, y, currentY, currentX - y);\n            }\n\n            if (y + currentX + 1 < this.maxRow) {\n                this.divideGrid(res, x, y + currentX + 1, currentY, height - currentX - 1);\n            }\n        } else {\n            /*\n             * Console.log(x, y, currentY-x, currentX);\n             * console.log(x + currentY+1, y, width - currentY -1, currentX);\n             */\n\n            if (currentY - x > 0) {\n                this.divideGrid(res, x, y, currentY - x, currentX);\n            }\n\n            if (x + currentY + 1 < this.maxCol) {\n                this.divideGrid(res, x + currentY + 1, y, width - currentY - 1, currentX);\n            }\n        }\n\n        /*\n         * TempX = this.isHorizontal ? currentX + 1 : x;\n         * tempY = this.isHorizontal ? y : currentY+1;\n         * tempHeight = this.isHorizontal ? height - currentX: height;\n         * tempWidth = this.isHorizontal ? width : width - currentY;\n         */\n\n        // This.divideGrid(res, tempX, tempY, tempHeight, tempWidth);\n    }\n\n    plotOnGraph() {\n        const arr = new Array(this.maxRow);\n\n        for (let i = 0; i < this.maxRow; i++) {\n            arr[i] = new Array(this.maxCol).fill(0);\n        }\n        this.divideGrid(arr, 0, 0, this.maxRow, this.maxCol);\n        for (let i = 0; i < this.maxRow; i++) {\n            for (let j = 0; j < this.maxCol; j++) {\n                if (arr[i][j] === 1) {\n                    this.trNodes[i].children[j].classList.add(\"wall\");\n                }\n            }\n        }\n    }\n}\n","export class Queue {\n    private readonly elements: Array<any>;\n\n    constructor() {\n        this.elements = [];\n    }\n\n    enqueue(element: any) {\n        this.elements.push(element);\n    }\n\n    dequeue() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        return this.elements.shift();\n    }\n\n    front() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        return this.elements[0];\n    }\n\n    isEmpty() {\n        return this.elements.length === 0;\n    }\n}\n","export class PathFindingAlgorithm {\n    protected readonly grid: HTMLTableSectionElement;\n\n    protected readonly source: [number, number];\n\n    protected readonly destination: [number, number];\n\n    protected readonly rows: number;\n\n    protected readonly cols: number;\n\n    protected readonly trNodes: HTMLCollectionOf<Element>;\n\n    protected readonly maxInt: number;\n\n    constructor(\n        grid: HTMLTableSectionElement,\n        source: [number, number],\n        destination: [number, number]\n    ) {\n        this.grid = grid;\n        this.source = source;\n        this.destination = destination;\n        this.trNodes = this.grid.children;\n        this.rows = this.trNodes.length;\n        this.cols = this.trNodes[0].children.length;\n        this.maxInt = Number.MAX_SAFE_INTEGER;\n    }\n\n    protected isValid(x: number, y: number) {\n        return !(x < 0 || y < 0 || x >= this.rows || y >= this.cols);\n    }\n\n    protected getNeigbourCoordinates(x: number, y: number) {\n        const array = [\n            {\n                x: x - 1,\n                y\n            },\n            {\n                x,\n                y: y - 1\n            },\n            {\n                x: x + 1,\n                y\n            },\n            {\n                x,\n                y: y + 1\n            }\n        ];\n\n        return array;\n    }\n\n    plotShortestRoute(shortestRoute: any) {\n        let result = shortestRoute;\n\n        if (result) {\n            while (result && result.getParent()) {\n                const coordinates = result.getCoordinates();\n\n                this.trNodes[coordinates.x].children[coordinates.y].classList.add(\"route\");\n                result = result.getParent();\n            }\n        }\n    }\n}\n","import { Queue } from \"../DataStructures/Queue\";\nimport { PathFindingAlgorithm } from \".\";\n\nclass Node {\n    private readonly x: number;\n\n    private readonly y: number;\n\n    private readonly distance: number;\n\n    private readonly parent: [number, number] | null;\n\n    constructor(x: number, y: number, distance: number, parent: [number, number] | null) {\n        this.x = x;\n        this.y = y;\n        this.distance = distance;\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n}\n\nexport class BreathFirstSearch extends PathFindingAlgorithm {\n    constructor(\n        grid: HTMLTableSectionElement,\n        source: [number, number],\n        destination: [number, number]\n    ) {\n        super(grid, source, destination);\n    }\n\n    getShortestRoute() {\n        if (\n            !(\n                this.source[0] <= this.rows &&\n                this.source[0] > 0 &&\n                this.destination[0] <= this.cols &&\n                this.destination[0] > 0\n            )\n        ) {\n            return null;\n        }\n        const array = new Array(this.rows);\n        const visited = new Array(this.rows);\n\n        for (let i = 0; i < this.rows; i++) {\n            const temp = [];\n            const visitedTemp = new Array(this.cols).fill(false);\n\n            for (let j = 0; j < this.cols; j++) {\n                const obj = { distance: 0, row: i, col: j };\n\n                if (i === this.source[0] && j === this.destination[0]) {\n                    obj.distance = 0;\n                }\n\n                if (this.trNodes[i].children[j].classList.contains(\"selected\")) {\n                    visitedTemp[j] = true;\n                }\n                temp.push(obj);\n            }\n            visited[i] = visitedTemp;\n            array[i] = temp;\n        }\n\n        const node = new Node(this.source[0], this.source[1], 0, null);\n\n        const queue = new Queue();\n\n        queue.enqueue(node);\n\n        let res;\n\n        let isPathFound = false;\n\n        while (!queue.isEmpty()) {\n            const front = queue.front();\n\n            queue.dequeue();\n\n            const { x, y, distance } = front;\n\n            if (x === this.destination[0] && y === this.destination[1]) {\n                isPathFound = true;\n                res = front;\n                break;\n            }\n\n            if (x - 1 > 0 && !visited[x - 1][y]) {\n                const node = new Node(x - 1, y, distance + 1, front);\n\n                queue.enqueue(node);\n                visited[x - 1][y] = true;\n            }\n\n            if (y - 1 > 0 && !visited[x][y - 1]) {\n                const node = new Node(x, y - 1, distance + 1, front);\n\n                queue.enqueue(node);\n                visited[x][y - 1] = true;\n            }\n\n            if (x + 1 < this.rows && !visited[x + 1][y]) {\n                const node = new Node(x + 1, y, distance + 1, front);\n\n                queue.enqueue(node);\n                visited[x + 1][y] = true;\n            }\n\n            if (y + 1 < this.cols && !visited[x][y + 1]) {\n                const node = new Node(x, y + 1, distance + 1, front);\n\n                queue.enqueue(node);\n                visited[x][y + 1] = true;\n            }\n        }\n\n        const pathNodes = [];\n\n        if (isPathFound) {\n            while (res.parent) {\n                pathNodes.push([res.x, res.y]);\n                res = res.parent;\n            }\n\n            return pathNodes;\n        }\n\n        return false;\n    }\n\n    plotShortestRoute() {\n        const res = this.getShortestRoute();\n\n        if (res) {\n            res.forEach((ele) => {\n                this.trNodes[ele[0]].children[ele[1]].classList.add(\"route\");\n            });\n        }\n    }\n}\n","export class GenericHeapAndMap {\n    protected readonly array: Array<any>;\n\n    constructor() {\n        this.array = [];\n    }\n\n    changePosition(index: number) {\n        let length = index;\n        let swapIndex = length;\n\n        try {\n            const distance = this.array[index].getDistance();\n\n            while (length) {\n                length = Math.floor((length - 1) / 2);\n\n                const parentIndex = length;\n\n                if (this.array[parentIndex].getDistance() > distance) {\n                    this.swapElements(parentIndex, swapIndex);\n                } else {\n                    break;\n                }\n                swapIndex = parentIndex;\n            }\n        } catch (e) {}\n    }\n\n    protected swapElements(index: number, indexToSwap: number) {\n        const temp = this.array[index];\n\n        const tempIndex = this.array[index].getArrayIndex();\n\n        this.array[index].setArrayIndex(this.array[indexToSwap].getArrayIndex());\n\n        this.array[index] = this.array[indexToSwap];\n\n        this.array[indexToSwap].setArrayIndex(tempIndex);\n\n        this.array[indexToSwap] = temp;\n    }\n\n    protected getKeyNotation(x: number, y: number) {\n        return `${x.toString()}-${y.toString()}`;\n    }\n\n    protected compareAndSwapElements(index: number, leftRightIndex: number) {\n        if (this.array[index].getDistance() > this.array[leftRightIndex].getDistance()) {\n            this.swapElements(index, leftRightIndex);\n\n            return leftRightIndex;\n        }\n\n        return false;\n    }\n\n    isEmpty() {\n        return this.array.length === 0;\n    }\n}\n","import { GenericHeapAndMap } from \"../HeapAndMap\";\n\nclass Node {\n    private readonly x: number;\n\n    private readonly y: number;\n\n    private distance: number;\n\n    private parent: Node | null;\n\n    private readonly isWall: boolean;\n\n    private arrayIndex: number;\n\n    constructor(\n        x: number,\n        y: number,\n        distance: number,\n        parent: Node | null,\n        isWall: boolean,\n        arrayIndex: number\n    ) {\n        this.x = x;\n        this.y = y;\n        this.distance = distance;\n        this.parent = parent;\n        this.isWall = isWall;\n        this.arrayIndex = arrayIndex;\n    }\n\n    getArrayIndex() {\n        return this.arrayIndex;\n    }\n\n    setArrayIndex(index: number) {\n        this.arrayIndex = index;\n    }\n\n    getDistance() {\n        return this.distance;\n    }\n\n    getCoordinates() {\n        return { x: this.x, y: this.y };\n    }\n\n    setDistance(distance: number) {\n        this.distance = distance;\n    }\n\n    setParent(parent: Node | null) {\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    containsWall() {\n        return this.isWall;\n    }\n}\n\nexport class HeapAndMap extends GenericHeapAndMap {\n    private readonly dict: { [key: string]: Node };\n\n    constructor() {\n        super();\n        this.dict = {};\n    }\n\n    add(x: number, y: number, distance: number, parent: Node | null, isWall = false) {\n        const node = new Node(x, y, distance, parent, isWall, this.array.length);\n\n        this.array.push(node);\n\n        this.dict[this.getKeyNotation(x, y)] = node;\n\n        let { length } = this.array;\n\n        let swapIndex = length - 1;\n\n        while (length) {\n            length = Math.floor((length - 1) / 2);\n\n            const parentIndex = length;\n\n            if (this.array[parentIndex].getDistance() > distance) {\n                this.swapElements(parentIndex, swapIndex);\n            } else {\n                break;\n            }\n            swapIndex = parentIndex;\n        }\n    }\n\n    changePosition(index: number) {\n        let length = index;\n        let swapIndex = length;\n\n        try {\n            const distance = this.array[index].getDistance();\n\n            while (length) {\n                length = Math.floor((length - 1) / 2);\n\n                const parentIndex = length;\n\n                if (this.array[parentIndex].getDistance() > distance) {\n                    this.swapElements(parentIndex, swapIndex);\n                } else {\n                    break;\n                }\n                swapIndex = parentIndex;\n            }\n        } catch (e) {}\n    }\n\n    contains(x: number, y: number) {\n        return this.getKeyNotation(x, y) in this.dict;\n    }\n\n    getNode(x: number, y: number) {\n        if (this.contains(x, y)) {\n            return this.dict[this.getKeyNotation(x, y)];\n        }\n\n        return null;\n    }\n\n    extractMin() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        const firstElement = this.array[0];\n\n        delete this.dict[\n            this.getKeyNotation(firstElement.getCoordinates().x, firstElement.getCoordinates().y)\n        ];\n\n        const lastElement = this.array.pop();\n\n        if (this.array.length && lastElement) {\n            this.array[0] = lastElement;\n        } else {\n            // Array is empty after popping last element\n            return firstElement;\n        }\n\n        let index = 0;\n\n        while (index < this.array.length) {\n            const leftChildIndex = 2 * index + 1;\n            const rightChildIndex = 2 * index + 2;\n\n            if (leftChildIndex >= this.array.length) {\n                break;\n            }\n\n            if (rightChildIndex >= this.array.length) {\n                if (this.compareAndSwapElements(index, leftChildIndex) !== false) {\n                    index = leftChildIndex;\n                } else {\n                    break;\n                }\n            } else if (\n                this.array[leftChildIndex].getDistance() <=\n                this.array[rightChildIndex].getDistance()\n            ) {\n                if (this.compareAndSwapElements(index, leftChildIndex) !== false) {\n                    index = leftChildIndex;\n                } else {\n                    break;\n                }\n            } else if (this.compareAndSwapElements(index, rightChildIndex) !== false) {\n                index = rightChildIndex;\n            } else {\n                break;\n            }\n        }\n\n        return firstElement;\n    }\n}\n","import { HeapAndMap } from \"./HeapAndMap\";\nimport { PathFindingAlgorithm } from \"..\";\n\nexport class Dijkstras extends PathFindingAlgorithm {\n    constructor(\n        grid: HTMLTableSectionElement,\n        source: [number, number],\n        destination: [number, number]\n    ) {\n        super(grid, source, destination);\n    }\n\n    private getNeighbours(q: HeapAndMap, x: number, y: number) {\n        const neigbours: Array<[number, number]> = [];\n\n        const array = this.getNeigbourCoordinates(x, y);\n\n        array.forEach((ele) => {\n            if (this.isValid(ele.x, ele.y)) {\n                const node = q.getNode(ele.x, ele.y);\n\n                if (node) {\n                    if (!node.containsWall()) {\n                        neigbours.push([ele.x, ele.y]);\n                    }\n                }\n            }\n        });\n\n        return neigbours;\n    }\n\n    getShortestRoute() {\n        if (\n            !(\n                this.source[0] <= this.rows &&\n                this.source[0] > 0 &&\n                this.destination[0] <= this.cols &&\n                this.destination[0] > 0\n            )\n        ) {\n            return null;\n        }\n\n        const heapMap = new HeapAndMap();\n\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n                if (this.trNodes[i].children[j].classList.contains(\"selected\")) {\n                    heapMap.add(i, j, this.maxInt, null, true);\n                } else if (this.source[0] === i && this.source[1] === j) {\n                    heapMap.add(i, j, 0, null);\n                } else {\n                    heapMap.add(i, j, this.maxInt, null);\n                }\n            }\n        }\n\n        let resultNode;\n\n        while (!heapMap.isEmpty()) {\n            const currentNode = heapMap.extractMin();\n\n            if (currentNode) {\n                const coordinates = currentNode.getCoordinates();\n\n                if (\n                    coordinates.x === this.destination[0] &&\n                    coordinates.y === this.destination[1]\n                ) {\n                    resultNode = currentNode;\n                    break;\n                }\n\n                const neighbours = this.getNeighbours(heapMap, coordinates.x, coordinates.y);\n\n                neighbours.forEach((neighbour) => {\n                    const node = heapMap.getNode(neighbour[0], neighbour[1]);\n\n                    if (node) {\n                        node.setDistance(currentNode.getDistance() + 1);\n                        node.setParent(currentNode);\n                        heapMap.changePosition(node.getArrayIndex());\n                    }\n                });\n            }\n        }\n\n        return resultNode;\n    }\n\n    plotShortestRoute() {\n        super.plotShortestRoute(this.getShortestRoute());\n    }\n}\n","import { GenericHeapAndMap } from \"../HeapAndMap\";\n\nclass Node {\n    private readonly x: number;\n\n    private readonly y: number;\n\n    private f: number;\n\n    private g: number;\n\n    private h: number;\n\n    private parent: Node | null;\n\n    private readonly isWall: boolean;\n\n    private arrayIndex: number;\n\n    constructor(\n        x: number,\n        y: number,\n        f: number,\n        g: number,\n        h: number,\n        parent: Node | null,\n        isWall: boolean,\n        arrayIndex: number\n    ) {\n        this.x = x;\n        this.y = y;\n        this.f = f;\n        this.g = g;\n        this.h = h;\n        this.parent = parent;\n        this.isWall = isWall;\n        this.arrayIndex = arrayIndex;\n    }\n\n    getArrayIndex() {\n        return this.arrayIndex;\n    }\n\n    setArrayIndex(index: number) {\n        this.arrayIndex = index;\n    }\n\n    getCoordinates() {\n        return { x: this.x, y: this.y };\n    }\n\n    setParent(parent: Node | null) {\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    setf(f: number) {\n        this.f = f;\n    }\n\n    seth(h: number) {\n        this.h = h;\n    }\n\n    setg(g: number) {\n        this.g = g;\n    }\n\n    getg() {\n        return this.g;\n    }\n\n    geth() {\n        return this.h;\n    }\n\n    getf() {\n        return this.f;\n    }\n\n    getDistance() {\n        return this.f;\n    }\n\n    containsWall() {\n        return this.isWall;\n    }\n}\n\n// We are using manhattan distance because we are going traversing only four neighbours\nexport function getManhattanDistance(\n    currentCell: { x: number; y: number },\n    goalCell: { x: number; y: number }\n) {\n    return Math.abs(currentCell.x - goalCell.x) + Math.abs(currentCell.y - goalCell.y);\n}\n\nexport class HeapAndMap extends GenericHeapAndMap {\n    private readonly openList: { [key: string]: Node };\n\n    private readonly closedList: { [key: string]: Node };\n\n    constructor() {\n        super();\n        this.openList = {};\n        this.closedList = {};\n    }\n\n    add(\n        x: number,\n        y: number,\n        f: number,\n        g: number,\n        h: number,\n        parent: Node | null,\n        isWall = false\n    ) {\n        const node = new Node(x, y, f, g, h, parent, isWall, this.array.length);\n\n        this.array.push(node);\n\n        this.openList[this.getKeyNotation(x, y)] = node;\n\n        let { length } = this.array;\n\n        let swapIndex = length - 1;\n\n        while (length) {\n            length = Math.floor((length - 1) / 2);\n\n            const parentIndex = length;\n\n            if (this.array[parentIndex].getf() > f) {\n                this.swapElements(parentIndex, swapIndex);\n            } else {\n                break;\n            }\n            swapIndex = parentIndex;\n        }\n    }\n\n    addClosedListNode(x: number, y: number, node: Node) {\n        this.closedList[this.getKeyNotation(x, y)] = node;\n    }\n\n    getClosedListNode(x: number, y: number): Node {\n        return this.closedList[this.getKeyNotation(x, y)];\n    }\n\n    private contains(x: number, y: number) {\n        return this.getKeyNotation(x, y) in this.openList;\n    }\n\n    getOpenListNode(x: number, y: number) {\n        if (this.contains(x, y)) {\n            return this.openList[this.getKeyNotation(x, y)];\n        }\n\n        return null;\n    }\n\n    extractMin() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        const firstElement = this.array[0];\n\n        delete this.openList[\n            this.getKeyNotation(firstElement.getCoordinates().x, firstElement.getCoordinates().y)\n        ];\n\n        const lastElement = this.array.pop();\n\n        if (!this.isEmpty() && lastElement) {\n            this.array[0] = lastElement;\n        } else {\n            // Array is empty after popping last element\n            return firstElement;\n        }\n\n        let index = 0;\n\n        while (index < this.array.length) {\n            const leftChildIndex = 2 * index + 1;\n            const rightChildIndex = 2 * index + 2;\n\n            if (leftChildIndex >= this.array.length) {\n                break;\n            }\n\n            if (rightChildIndex >= this.array.length) {\n                if (this.compareAndSwapElements(index, leftChildIndex) !== false) {\n                    index = leftChildIndex;\n                } else {\n                    break;\n                }\n            } else if (this.array[leftChildIndex].getf() <= this.array[rightChildIndex].getf()) {\n                if (this.compareAndSwapElements(index, leftChildIndex) !== false) {\n                    index = leftChildIndex;\n                } else {\n                    break;\n                }\n            } else if (this.compareAndSwapElements(index, rightChildIndex) !== false) {\n                index = rightChildIndex;\n            } else {\n                break;\n            }\n        }\n\n        return firstElement;\n    }\n}\n","import { HeapAndMap, getManhattanDistance } from \"./HeapAndMap\";\n\nimport { PathFindingAlgorithm } from \"..\";\n\nexport class AStar extends PathFindingAlgorithm {\n    constructor(\n        grid: HTMLTableSectionElement,\n        source: [number, number],\n        destination: [number, number]\n    ) {\n        super(grid, source, destination);\n    }\n\n    private getNeighbours(q: HeapAndMap, x: number, y: number) {\n        const array = this.getNeigbourCoordinates(x, y);\n        const neigbours: Array<[number, number]> = [];\n\n        array.forEach((ele) => {\n            if (this.isValid(ele.x, ele.y)) {\n                const node = q.getOpenListNode(ele.x, ele.y);\n\n                if (node) {\n                    if (!node.containsWall()) {\n                        neigbours.push([ele.x, ele.y]);\n                    }\n                }\n            }\n        });\n\n        return neigbours;\n    }\n\n    getShortestRoute() {\n        if (\n            !(\n                this.source[0] <= this.rows &&\n                this.source[0] > 0 &&\n                this.destination[0] <= this.cols &&\n                this.destination[0] > 0\n            )\n        ) {\n            return null;\n        }\n\n        const heapMap = new HeapAndMap();\n\n        heapMap.add(this.source[0], this.source[1], 0, 0, 0, null, false);\n\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n                if (this.trNodes[i].children[j].classList.contains(\"wall\")) {\n                    heapMap.add(i, j, this.maxInt, this.maxInt, this.maxInt, null, true);\n                } else if (this.source[0] === i && this.source[1] === j) {\n                    heapMap.add(i, j, 0, 0, 0, null);\n                } else {\n                    heapMap.add(i, j, this.maxInt, this.maxInt, this.maxInt, null);\n                }\n            }\n        }\n\n        let cnt = 0;\n\n        let resultNode;\n\n        while (!heapMap.isEmpty()) {\n            const currentNode = heapMap.extractMin();\n\n            cnt += 1;\n\n            if (currentNode) {\n                const coordinates = currentNode.getCoordinates();\n\n                if (\n                    coordinates.x === this.destination[0] &&\n                    coordinates.y === this.destination[1]\n                ) {\n                    resultNode = currentNode;\n                    break;\n                }\n\n                const neighbours = this.getNeighbours(heapMap, coordinates.x, coordinates.y);\n\n                for (const neighbour of neighbours) {\n                    const openListNode = heapMap.getOpenListNode(neighbour[0], neighbour[1]);\n\n                    const g = currentNode.getg() + 1;\n                    const h = getManhattanDistance(\n                        { x: neighbour[0], y: neighbour[1] },\n                        { x: this.destination[0], y: this.destination[1] }\n                    );\n                    const f = g + h;\n\n                    const closedListNode = heapMap.getClosedListNode(neighbour[0], neighbour[1]);\n\n                    if (closedListNode) {\n                        continue;\n                    }\n\n                    if (openListNode) {\n                        if (openListNode.getf() < f) {\n                            continue;\n                        } else {\n                            openListNode.setg(g);\n                            openListNode.seth(h);\n                            openListNode.setf(f);\n                            openListNode.setParent(currentNode);\n                            heapMap.changePosition(openListNode.getArrayIndex());\n                        }\n                    }\n                }\n\n                heapMap.addClosedListNode(\n                    currentNode.getCoordinates().x,\n                    currentNode.getCoordinates().y,\n                    currentNode\n                );\n            }\n        }\n\n        return resultNode;\n    }\n\n    plotShortestRoute() {\n        super.plotShortestRoute(this.getShortestRoute());\n    }\n}\n","import React, { FunctionComponent, SyntheticEvent, useRef, useEffect, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useStyles } from \"./styles\";\nimport { RootState } from \"../../reducers\";\nimport RecursiveBackTracker from \"../../MazeGenerationAlgorithms/RecursiveBacktracker\";\nimport RandomizedPrims from \"../../MazeGenerationAlgorithms/RandomizedPrims\";\nimport RecursiveDivision from \"../../MazeGenerationAlgorithms/RecursiveDivision\";\nimport { BreathFirstSearch } from \"../../PathFindingAlgorithms/BreathFirstSearch\";\nimport { Dijkstras } from \"../../PathFindingAlgorithms/Dijkstras/Dijkstras\";\nimport { AStar } from \"../../PathFindingAlgorithms/A*/A*\";\n\nconst Nodes: FunctionComponent<{ height: number; width: number }> = ({ height, width }) => {\n    const classes = useStyles();\n\n    let trHeight = 30;\n    let trWidth = 30;\n\n    const rows = Math.floor(height / trHeight);\n    const cols = Math.floor(width / trWidth);\n\n    function tdRowListener(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        const currentTargetClassList = e.currentTarget.classList;\n        const classes = new Set(e.currentTarget.classList);\n\n        if (classes.has(\"source\") || classes.has(\"destination\")) {\n            return;\n        }\n\n        if (classes.has(\"wall\")) {\n            currentTargetClassList.remove(\"wall\");\n        } else {\n            currentTargetClassList.add(\"wall\");\n        }\n    }\n\n    let shouldMouseEnter = false;\n\n    function onMouseDown(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        tdRowListener(e);\n        shouldMouseEnter = true;\n    }\n\n    function onMouseUp() {\n        shouldMouseEnter = false;\n    }\n\n    function onMouseEnter(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        if (shouldMouseEnter) {\n            tdRowListener(e);\n        }\n    }\n\n    const borderRadius = 1;\n\n    trWidth -= borderRadius * 4;\n    trHeight -= borderRadius * 4;\n\n    const ColNodes: FunctionComponent<{ row: number }> = ({ row }) => {\n        const res = [];\n        const isMiddle = row === Math.floor(rows / 2);\n        const startNode = Math.floor(cols / 4);\n        const endNode = startNode * 3;\n\n        let className = \"\";\n        let text = \"\";\n\n        for (let i = 0; i < cols; i++) {\n            if (isMiddle) {\n                if (startNode === i) {\n                    className = \"source\";\n                    text = \"S\";\n                } else if (endNode === i) {\n                    className = \"destination\";\n                    text = \"D\";\n                } else {\n                    className = \"\";\n                    text = \"\";\n                }\n            }\n            res.push(\n                <td\n                    key={`${row}-${i}`}\n                    className={className}\n                    data-id={`${row}-${i}`}\n                    style={{\n                        width: trWidth,\n                        height: trHeight,\n                        border: `${borderRadius}px solid blue`\n                    }}\n                    onMouseDown={onMouseDown}\n                    onMouseEnter={onMouseEnter}\n                    onMouseUp={onMouseUp}\n                >\n                    {text}\n                </td>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const RowNodes: FunctionComponent = () => {\n        const res = [];\n\n        for (let i = 0; i < rows; i++) {\n            res.push(\n                <tr key={i}>\n                    <ColNodes row={i} />\n                </tr>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const mazeType = useSelector((state: RootState) => state.globals.mazeType);\n\n    const algorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    useEffect(() => {\n        if (bodyRef.current) {\n            if (mazeType === \"recursiveBackTracker\") {\n                const recursiveBacktracker = new RecursiveBackTracker(bodyRef.current, [0, 0]);\n\n                recursiveBacktracker.plotOnGraph();\n            } else if (mazeType === \"randomizedPrims\") {\n                const randomizedPrims = new RandomizedPrims(bodyRef.current, [0, 0]);\n\n                randomizedPrims.plotOnGraph();\n            } else if (mazeType === \"recursiveDivision\") {\n                const recursiveDivision = new RecursiveDivision(bodyRef.current);\n\n                recursiveDivision.plotOnGraph();\n            }\n        }\n    }, [mazeType]);\n\n    useEffect(() => {\n        if (bodyRef.current) {\n            const documentSource = document.querySelector(\".source\") as HTMLElement;\n            const documentDestination = document.querySelector(\".destination\") as HTMLElement;\n\n            const source: [number, number] = [0, 0];\n            const destination: [number, number] = [0, 0];\n\n            if (documentSource && documentSource.dataset.id) {\n                const [x, y] = documentSource.dataset.id.split(\"-\");\n\n                source[0] = parseInt(x);\n                source[1] = parseInt(y);\n            }\n\n            if (documentDestination && documentDestination.dataset.id) {\n                const [x, y] = documentDestination.dataset.id.split(\"-\");\n\n                destination[0] = parseInt(x);\n                destination[1] = parseInt(y);\n            }\n\n            if (algorithm === \"BFS\") {\n                const BFS = new BreathFirstSearch(bodyRef.current, source, destination);\n\n                BFS.plotShortestRoute();\n            } else if (algorithm === \"Dijkstra's\") {\n                const Dijkstra = new Dijkstras(bodyRef.current, source, destination);\n\n                Dijkstra.plotShortestRoute();\n            } else if (algorithm === \"AStar\") {\n                const AS = new AStar(bodyRef.current, source, destination);\n\n                AS.plotShortestRoute();\n            }\n        }\n    }, [algorithm]);\n\n    const bodyRef = useRef<HTMLTableSectionElement>(null);\n\n    return useMemo(\n        () => (\n            <table className={classes.table}>\n                <tbody ref={bodyRef}>\n                    <RowNodes key=\"constant\" />\n                </tbody>\n            </table>\n        ),\n        []\n    );\n};\n\nexport default Nodes;\n","import React, { FunctionComponent, useRef, useEffect, useState } from \"react\";\nimport { useStyles } from \"./styles\";\nimport Nodes from \"./nodes\";\n\nconst Graph: FunctionComponent = () => {\n    const classes = useStyles();\n    const graphRef = useRef<HTMLDivElement>(null);\n\n    const [heightWidth, setHeightWidth] = useState([0, 0]);\n\n    useEffect(() => {\n        if (graphRef.current) {\n            setHeightWidth([graphRef.current.clientHeight, graphRef.current.clientWidth]);\n        }\n    }, []);\n\n    return (\n        <div ref={graphRef} className={classes.root}>\n            {heightWidth[0] > 0 && <Nodes height={heightWidth[0]} width={heightWidth[1]} />}\n        </div>\n    );\n};\n\nexport default Graph;\n","import React, { FunctionComponent } from \"react\";\n\nconst Info: FunctionComponent = () => <div />;\n\nexport default Info;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        main: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: \"10px\"\n        }\n    })\n);\n","import React, { ReactElement } from \"react\";\nimport Header from \"./components/header\";\nimport Graph from \"./components/graph\";\nimport Info from \"./components/Info\";\nimport { useStyles } from \"./AppStyles\";\n\nfunction App(): ReactElement {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Header />\n            <div className={classes.main}>\n                <Info />\n                <Graph />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_ALGORITHM,\n    CHANGE_MAZE_TYPE,\n    CHANGE_ANIMATION_SPEED,\n    CLEAR_ROUTE,\n    CLEAR_BOARD,\n    CLEAR_WEIGHTS,\n    VISUALIZE_ALGORITHM,\n    GlobalTypes,\n    GlobalState\n} from \"../actions/types\";\n\nconst initialState: GlobalState = {\n    algorithm: \"\",\n    animationSpeed: 50,\n    mazeType: \"\",\n    clearRoute: false,\n    clearBoard: false,\n    clearWeights: false,\n    vAlgorithm: false\n};\n\nconst globals = (state = initialState, action: GlobalTypes): GlobalState => {\n    switch (action.type) {\n        case CHANGE_ALGORITHM: {\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        }\n        case CHANGE_MAZE_TYPE: {\n            return {\n                ...state,\n                mazeType: action.mazeType\n            };\n        }\n        case CHANGE_ANIMATION_SPEED: {\n            return {\n                ...state,\n                animationSpeed: action.animationSpeed\n            };\n        }\n        case CLEAR_ROUTE: {\n            return {\n                ...state,\n                clearRoute: action.clearRoute\n            };\n        }\n        case CLEAR_BOARD: {\n            return {\n                ...state,\n                clearBoard: action.clearBoard\n            };\n        }\n        case CLEAR_WEIGHTS: {\n            return {\n                ...state,\n                clearWeights: action.clearWeights\n            };\n        }\n        case VISUALIZE_ALGORITHM: {\n            return {\n                ...state,\n                vAlgorithm: action.vAlgorithm\n            };\n        }\n        default: {\n            return {\n                ...state\n            };\n        }\n    }\n};\n\nexport default globals;\n","import { combineReducers } from \"redux\";\n\nimport globals from \"./globals\";\n\nexport const rootReducer = combineReducers({\n    globals\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, {});\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport \"typeface-roboto\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}