{"version":3,"sources":["components/header/styles.ts","components/header/index.tsx","actions/index.ts","actions/types.ts","components/graph/styles.ts","MazeGenerationAlgorithms/RecursiveBacktracker.ts","components/graph/nodes.tsx","components/graph/index.tsx","components/Info/index.tsx","AppStyles.ts","App.tsx","serviceWorker.ts","reducers/globals.ts","reducers/index.ts","store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","header","padding","maxWidth","overflowX","toolbar","color","flexDirection","display","marginRight","Header","dispatch","useDispatch","algorithm","useSelector","state","globals","mazeType","graphAlgorithms","useRef","name","value","mazeGenerationAlgorithms","classes","AppBar","className","position","Toolbar","Typography","variant","onClick","window","location","reload","InputLabel","id","Select","labelId","onChange","event","type","changeAlgorithm","target","current","map","algo","MenuItem","key","changeMazeType","Button","gutterBottom","Slider","aria-labelledby","defaultValue","getAriaValueText","toString","marks","max","min","step","valueLabelDisplay","root","flex","from","transform","to","table","overflow","borderSpacing","textAlign","animation","backgroundColor","borderRight","borderLeft","borderTop","borderBottom","RecursiveBackTracker","array","startIndex","this","Math","floor","random","i","j","maxi","maxj","visited","neighbours","temp","tempString","has","push","length","getRandom","randomNeighbour","currentCell","trNodes","trLength","tdLength","children","classList","add","stack","Set","pop","getRandomNeighbour","removeWalls","Nodes","height","width","trHeight","trWidth","rows","cols","tdRowListener","e","currentTargetClassList","currentTarget","remove","shouldMouseEnter","onMouseDown","onMouseUp","onMouseEnter","borderRadius","ColNodes","row","res","isMiddle","startNode","endNode","text","data-id","style","border","RowNodes","useEffect","bodyRef","plotOnGraph","useMemo","ref","Graph","graphRef","useState","heightWidth","setHeightWidth","clientHeight","clientWidth","Info","main","App","Boolean","hostname","match","initialState","animationSpeed","clearRoute","clearBoard","clearWeights","vAlgorithm","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.103c7083.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        header: {\n            padding: \"10px\",\n            maxWidth: \"100%\",\n            overflowX: \"auto\"\n        },\n        toolbar: {\n            \"& > *\": {\n                color: \"white\",\n                flexDirection: \"column\",\n                display: \"flex\",\n                marginRight: \"40px\"\n            }\n        }\n    })\n);\n","import React, { FunctionComponent, ChangeEvent, useRef } from \"react\";\nimport {\n    Slider,\n    AppBar,\n    Toolbar,\n    Typography,\n    Select,\n    MenuItem,\n    InputLabel,\n    Button\n} from \"@material-ui/core\";\nimport { useStyles } from \"./styles\";\nimport { changeAlgorithm, changeMazeType } from \"../../actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\n\nconst Header: FunctionComponent = () => {\n\n    const dispatch = useDispatch();\n\n    const algorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    const toggleGraphAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        dispatch(changeAlgorithm(event.target.value as string));\n    };\n\n    const mazeType = useSelector((state: RootState) => state.globals.mazeType);\n\n    const toggleMazeGenerationAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        dispatch(changeMazeType(event.target.value as string));\n    };\n\n    const graphAlgorithms = useRef([\n        {\n            name: \"Depth First Search\",\n            value: \"DFS\"\n        },\n        {\n            name: \"A*\",\n            value: \"A*\"\n        }\n    ]);\n\n    const mazeGenerationAlgorithms = useRef([\n        {\n            name: \"Random\",\n            value: \"random\"\n        },\n        {\n            name: \"Recursive Backtracker\",\n            value: \"recursiveBackTracker\"\n        }\n    ]);\n\n    function getAnimationSpeed(value: number) {\n        return value.toString();\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <AppBar className={classes.header} position=\"static\">\n                <Toolbar className={classes.toolbar}>\n                    <Typography className=\"cursor-pointer\" variant=\"h4\" onClick={() => window.location.reload()}>\n                        Pathfinding Visualizer\n                    </Typography>\n\n                    <div className=\"graphAlgorithms\">\n                        <InputLabel id=\"graphAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Algorithms</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"graphAlgorithms\"\n                            labelId=\"graphAlgorithmsLabel\"\n                            value={algorithm}\n                            onChange={toggleGraphAlgorithmFunc}\n                        >\n                            {graphAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <div className=\"mazeGenerationAlgorithms\">\n                        <InputLabel id=\"mazeGenerationAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Mazes</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"mazeGenerationAlgorithms\"\n                            labelId=\"mazeGenerationAlgorithmsLabel\"\n                            value={mazeType}\n                            onChange={toggleMazeGenerationAlgorithmFunc}\n                        >\n                            {mazeGenerationAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <Button variant=\"contained\">Visualize</Button>\n\n                    <div>\n                        <Typography gutterBottom={true} id=\"animationSpeedSlider\">\n                            Animation Speed\n                        </Typography>\n                        <Slider\n                            aria-labelledby=\"animationSpeedSliderr\"\n                            defaultValue={30}\n                            getAriaValueText={getAnimationSpeed}\n                            marks={true}\n                            max={100}\n                            min={10}\n                            step={10}\n                            valueLabelDisplay=\"auto\"\n                        />\n                    </div>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Route\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Weights\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Board\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default Header;\n","import {\n    AlgorithmType,\n    GlobalTypes,\n    CHANGE_ALGORITHM,\n    MazeType,\n    CHANGE_MAZE_TYPE,\n    AnimationSpeed,\n    CHANGE_ANIMATION_SPEED,\n    CLEAR_ROUTE,\n    Route,\n    Weights,\n    CLEAR_WEIGHTS,\n    Board,\n    CLEAR_BOARD,\n    VISUALIZE_ALGORITHM,\n    VAlgorithm\n} from \"./types\";\n\nexport const changeAlgorithm = (algorithm: AlgorithmType): GlobalTypes => ({\n    algorithm,\n    type: CHANGE_ALGORITHM\n});\n\nexport const changeMazeType = (mazeType: MazeType): GlobalTypes => ({\n    mazeType,\n    type: CHANGE_MAZE_TYPE\n});\n\nexport const changeAnimationSpeed = (animationSpeed: AnimationSpeed): GlobalTypes => ({\n    animationSpeed,\n    type: CHANGE_ANIMATION_SPEED\n});\n\nexport const toggleClearRoute = (clearRoute: Route): GlobalTypes => ({\n    clearRoute,\n    type: CLEAR_ROUTE\n});\n\nexport const toggleClearWeights = (clearWeights: Weights): GlobalTypes => ({\n    clearWeights,\n    type: CLEAR_WEIGHTS\n});\n\nexport const toggleClearBoard = (clearBoard: Board): GlobalTypes => ({\n    clearBoard,\n    type: CLEAR_BOARD\n});\n\nexport const toggleVisualizeAlgorithm = (vAlgorithm: VAlgorithm): GlobalTypes => ({\n    vAlgorithm,\n    type: VISUALIZE_ALGORITHM\n});\n","export const CHANGE_ALGORITHM = \"CHANGE_ALGORITHM\";\nexport const CHANGE_MAZE_TYPE = \"CHANGE_MAZE_TYPE\";\nexport const CHANGE_ANIMATION_SPEED = \"CHANGE_ANIMATION_SPEED\";\nexport const CLEAR_ROUTE = \"CLEAR_ROUTE\";\nexport const CLEAR_WEIGHTS = \"CLEAR_WEIGHTS\";\nexport const CLEAR_BOARD = \"CLEAR_BOARD\";\nexport const VISUALIZE_ALGORITHM = \"VISUALIZE_ALGORITHM\";\n\nexport type AlgorithmType = string;\nexport type MazeType = string;\nexport type AnimationSpeed = number;\nexport type Route = boolean;\nexport type Weights = boolean;\nexport type Board = boolean;\nexport type VAlgorithm = boolean;\n\nexport interface ChangeAlgorithm {\n    type: typeof CHANGE_ALGORITHM;\n    algorithm: AlgorithmType;\n}\n\nexport interface ChangeMazeType {\n    type: typeof CHANGE_MAZE_TYPE;\n    mazeType: MazeType;\n}\n\nexport interface ChangeAnimationSpeed {\n    type: typeof CHANGE_ANIMATION_SPEED;\n    animationSpeed: AnimationSpeed;\n}\n\nexport interface ClearRoute {\n    type: typeof CLEAR_ROUTE;\n    clearRoute: Route;\n}\n\nexport interface ClearWeights {\n    type: typeof CLEAR_WEIGHTS;\n    clearWeights: Weights;\n}\n\nexport interface ClearBoard {\n    type: typeof CLEAR_BOARD;\n    clearBoard: Board;\n}\n\nexport interface VisualizeAlgorithm {\n    type: typeof VISUALIZE_ALGORITHM;\n    vAlgorithm: VAlgorithm;\n}\n\nexport type GlobalTypes =\n    | ChangeAlgorithm\n    | ChangeMazeType\n    | ChangeAnimationSpeed\n    | ClearRoute\n    | ClearWeights\n    | ClearBoard\n    | VisualizeAlgorithm;\n\nexport interface GlobalState {\n    algorithm: AlgorithmType;\n    mazeType: MazeType;\n    animationSpeed: AnimationSpeed;\n    clearWeights: Weights;\n    clearBoard: Board;\n    clearRoute: Route;\n    vAlgorithm: VAlgorithm;\n}\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flex: 1\n        },\n        \"@keyframes tdAnimation\": {\n            from: {\n                transform: \"scaleX(0)\"\n            },\n            to: {\n                transform: \"scaleX(1)\"\n            }\n        },\n        table: {\n            overflow: \"hidden\",\n            borderSpacing: 0,\n            \"& td\": {\n                textAlign: \"center\",\n                color: \"white\",\n                animation: \"$tdAnimation 1500ms\"\n            },\n            \"& td.selected\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                backgroundColor: \"#61dafb\"\n            },\n            \"& td.borderRightNone\": {\n                borderRight: \"none !important\",\n            },\n            \"& td.borderLeftNone\": {\n                borderLeft: \"none !important\",\n            },\n            \"& td.borderTopNone\": {\n                borderTop: \"none !important\",\n            },\n            \"& td.borderBottomNone\": {\n                borderBottom: \"none !important\",\n            },\n            \"& td.source\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                backgroundColor: \"green\"\n            },\n            \"& td.destination\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                backgroundColor: \"red\"\n            }\n        }\n    })\n);\n","export default class RecursiveBackTracker {\n\n    private readonly array: HTMLTableSectionElement;\n    private readonly startIndex: [number, number];\n\n    constructor(array: HTMLTableSectionElement, startIndex: [number, number]) {\n        this.array = array;\n        this.startIndex = startIndex\n    }\n\n    getRandom(min: number, max: number) {\n        return Math.floor(Math.random() * (max-min+1)) + min;\n    }\n\n    getRandomNeighbour(i: number, j: number, maxi: number, maxj: number, visited: Set<string>) {\n        let neighbours: Array<any> = [];\n\n        if (i-1 > 0) {\n            const temp = [i-1, j], tempString = temp.toString();\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (i+1 < maxi) {\n            const temp = [i+1, j], tempString = temp.toString();\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (j-1 > 0) {\n            const temp = [i, j-1], tempString = temp.toString();\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (j+1 < maxj) {\n            const temp = [i, j+1], tempString = temp.toString();\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (!neighbours.length) {\n            return -1;\n        }\n        const randomIndex = this.getRandom(0, neighbours.length-1);\n        return neighbours[randomIndex];\n    }\n    \n    removeWalls(randomNeighbour: [number, number] , currentCell: any,\n             trNodes: any, trLength: number, tdLength: number) {\n\n        if (randomNeighbour[1] > currentCell[1]) {\n            trNodes[currentCell[0]].children[currentCell[1]].classList.add(\"borderRightNone\");\n\n            if (currentCell[1]+1 < tdLength) {\n                trNodes[currentCell[0]].children[currentCell[1]+1].classList.add(\"borderLeftNone\");\n            }\n        }\n\n        else if (randomNeighbour[0] > currentCell[0]) {\n            trNodes[currentCell[0]].children[currentCell[1]].classList.add(\"borderBottomNone\");\n\n            if (currentCell[0]+1 < trLength) {\n                trNodes[currentCell[0]+1].children[currentCell[1]].classList.add(\"borderTopNone\");\n            }\n        }\n\n        else if(currentCell[1] > randomNeighbour[1]) {\n            trNodes[currentCell[0]].children[currentCell[1]].classList.add(\"borderLeftNone\");\n\n            if (currentCell[1]-1 > 0) {\n                trNodes[currentCell[0]].children[currentCell[1]-1].classList.add(\"borderRightNone\");\n            }\n        }\n\n        else if (currentCell[0] > randomNeighbour[0]) {\n            trNodes[currentCell[0]].children[currentCell[1]].classList.add(\"borderTopNone\");\n\n            if (currentCell[0]-1 > 0) {\n                trNodes[currentCell[0]-1].children[currentCell[1]].classList.add(\"borderBottomNone\");\n            }\n        }\n    }\n\n    plotOnGraph() {\n        const trNodes = this.array.children;\n        const trLength = trNodes.length;\n        const tdLength = trNodes[0].children.length;\n        \n        const stack: Array<any> = [];\n        const visited: Set<string> = new Set([]);\n        const walls: Set<string> = new Set([]);\n\n        let i = this.startIndex[0], j = this.startIndex[1];\n\n        let currentCell = [i, j];\n\n        visited.add(currentCell.toString());\n\n        stack.push(currentCell);\n\n        let cnt = 0\n        while (stack.length) {\n            const temp = stack.pop();\n            cnt+=1;\n            if (temp) {\n                currentCell = temp;\n                const randomNeighbour = this.getRandomNeighbour(currentCell[0], currentCell[1], trLength, tdLength, visited);\n                if (randomNeighbour !== -1) {\n                    stack.push(currentCell);\n\n                    this.removeWalls(randomNeighbour, currentCell, trNodes, trLength, tdLength);\n\n                    visited.add(randomNeighbour.toString());\n                    \n                    stack.push(randomNeighbour);\n                }\n            }\n        }\n    }\n}","import React, { FunctionComponent, SyntheticEvent, useRef, useEffect, useMemo } from \"react\";\nimport { useStyles } from \"./styles\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport RecursiveBackTracker from \"../../MazeGenerationAlgorithms/RecursiveBacktracker\";\n\nconst Nodes: FunctionComponent<{ height: number; width: number }> = ({ height, width }) => {\n    const classes = useStyles();\n\n    let trHeight = 30;\n    let trWidth = 30;\n\n    const rows = Math.floor(height / trHeight);\n    const cols = Math.floor(width / trWidth);\n\n    function tdRowListener(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        const currentTargetClassList = e.currentTarget.classList;\n        const classes = new Set(e.currentTarget.classList);\n\n        if (classes.has(\"source\") || classes.has(\"destination\")) {\n            return;\n        }\n\n        if (classes.has(\"selected\")) {\n            currentTargetClassList.remove(\"selected\");\n        } else {\n            currentTargetClassList.add(\"selected\");\n        }\n    }\n\n    let shouldMouseEnter = false;\n\n    function onMouseDown(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        tdRowListener(e);\n        shouldMouseEnter = true;\n    }\n\n    function onMouseUp() {\n        shouldMouseEnter = false;\n    }\n\n    function onMouseEnter(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        if (shouldMouseEnter) {\n            tdRowListener(e);\n        }\n    }\n\n    const borderRadius = 1;\n\n    trWidth -= borderRadius * 4;\n    trHeight -= borderRadius * 4;\n\n    const ColNodes: FunctionComponent<{ row: number }> = ({ row }) => {\n        const res = [];\n        const isMiddle = row === Math.floor(rows / 2);\n        const startNode = Math.floor(cols / 4);\n        const endNode = startNode * 3;\n\n        let className = \"\";\n        let text = \"\";\n\n        for (let i = 0; i < cols; i++) {\n            if (isMiddle) {\n                if (startNode === i) {\n                    className = \"source\";\n                    text = \"S\";\n                } else if (endNode === i) {\n                    className = \"destination\";\n                    text = \"D\";\n                } else {\n                    className = \"\";\n                    text = \"\";\n                }\n            }\n            res.push(\n                <td\n                    key={`${row}${i}`}\n                    className={className}\n                    data-id={`${row}${i}`}\n                    style={{\n                        width: trWidth,\n                        height: trHeight,\n                        border: `${borderRadius}px solid blue`\n                    }}\n                    onMouseDown={onMouseDown}\n                    onMouseEnter={onMouseEnter}\n                    onMouseUp={onMouseUp}\n                >\n                    {text}\n                </td>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const RowNodes: FunctionComponent = () => {\n        const res = [];\n        for (let i = 0; i < rows; i++) {\n            res.push(\n                <tr key={i}>\n                    <ColNodes row={i} />\n                </tr>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const mazeType = useSelector((state: RootState) => state.globals.mazeType);\n\n    useEffect(() => {\n        if (bodyRef.current) {\n            if (mazeType === \"recursiveBackTracker\") {\n                const recursiveBacktracker = new RecursiveBackTracker(bodyRef.current, [0, 0]);\n                recursiveBacktracker.plotOnGraph();\n            }\n        }\n    }, [mazeType]);\n\n    const bodyRef = useRef<HTMLTableSectionElement>(null);\n\n    return useMemo(() => {\n        return (\n            <table className={classes.table}>\n                <tbody ref={bodyRef}>\n                    <RowNodes key={\"constant\"} />\n                </tbody>\n            </table>\n        )\n    }, [])\n};\n\nexport default Nodes;\n","import React, { FunctionComponent, useRef, useEffect, useState } from \"react\";\nimport { useStyles } from \"./styles\";\nimport Nodes from \"./nodes\";\n\nconst Graph: FunctionComponent = () => {\n    const classes = useStyles();\n    const graphRef = useRef<HTMLDivElement>(null);\n\n    const [heightWidth, setHeightWidth] = useState([0, 0]);\n\n    useEffect(() => {\n        if (graphRef.current) {\n            setHeightWidth([graphRef.current.clientHeight, graphRef.current.clientWidth]);\n        }\n    }, []);\n\n    return (\n        <div ref={graphRef} className={classes.root}>\n            {heightWidth[0] > 0 && <Nodes height={heightWidth[0]} width={heightWidth[1]} />}\n        </div>\n    );\n};\n\nexport default Graph;\n","import React, { FunctionComponent } from \"react\";\n\nconst Info: FunctionComponent = () => <div />;\n\nexport default Info;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        main: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: \"10px\"\n        }\n    })\n);\n","import React, { ReactElement } from \"react\";\nimport Header from \"./components/header\";\nimport Graph from \"./components/graph\";\nimport Info from \"./components/Info\";\nimport { useStyles } from \"./AppStyles\";\n\nfunction App(): ReactElement {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Header />\n            <div className={classes.main}>\n                <Info />\n                <Graph />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_ALGORITHM,\n    CHANGE_MAZE_TYPE,\n    CHANGE_ANIMATION_SPEED,\n    CLEAR_ROUTE,\n    CLEAR_BOARD,\n    CLEAR_WEIGHTS,\n    VISUALIZE_ALGORITHM,\n    GlobalTypes,\n    GlobalState\n} from \"../actions/types\";\n\nconst initialState: GlobalState = {\n    algorithm: \"\",\n    animationSpeed: 50,\n    mazeType: \"\",\n    clearRoute: false,\n    clearBoard: false,\n    clearWeights: false,\n    vAlgorithm: false\n};\n\nconst globals = (state = initialState, action: GlobalTypes): GlobalState => {\n    switch (action.type) {\n        case CHANGE_ALGORITHM: {\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        }\n        case CHANGE_MAZE_TYPE: {\n            return {\n                ...state,\n                mazeType: action.mazeType\n            };\n        }\n        case CHANGE_ANIMATION_SPEED: {\n            return {\n                ...state,\n                animationSpeed: action.animationSpeed\n            };\n        }\n        case CLEAR_ROUTE: {\n            return {\n                ...state,\n                clearRoute: action.clearRoute\n            };\n        }\n        case CLEAR_BOARD: {\n            return {\n                ...state,\n                clearBoard: action.clearBoard\n            };\n        }\n        case CLEAR_WEIGHTS: {\n            return {\n                ...state,\n                clearWeights: action.clearWeights\n            };\n        }\n        case VISUALIZE_ALGORITHM: {\n            return {\n                ...state,\n                vAlgorithm: action.vAlgorithm\n            };\n        }\n        default: {\n            return {\n                ...state\n            };\n        }\n    }\n};\n\nexport default globals;\n","import { combineReducers } from \"redux\";\n\nimport globals from \"./globals\";\n\nexport const rootReducer = combineReducers({\n    globals\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, {});\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport \"typeface-roboto\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}