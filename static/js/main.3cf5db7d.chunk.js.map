{"version":3,"sources":["assets/weight.svg","components/header/styles.ts","commonUtilities.ts","components/header/index.tsx","actions/index.ts","actions/types.ts","components/graph/styles.ts","MazeGenerationAlgorithms/RecursiveBacktracker.ts","MazeGenerationAlgorithms/RandomizedPrims.ts","MazeGenerationAlgorithms/RecursiveDivision.ts","DataStructures/Queue.ts","PathFindingAlgorithms/index.tsx","PathFindingAlgorithms/BreathFirstSearch.ts","PathFindingAlgorithms/HeapAndMap.ts","PathFindingAlgorithms/Dijkstras/HeapAndMap.ts","PathFindingAlgorithms/Dijkstras/Dijkstras.ts","PathFindingAlgorithms/A*/HeapAndMap.ts","PathFindingAlgorithms/A*/A*.ts","components/graph/nodes.tsx","components/graph/index.tsx","components/Info/index.tsx","AppStyles.ts","App.tsx","serviceWorker.ts","reducers/globals.ts","reducers/index.ts","store.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","header","padding","maxWidth","overflowX","toolbar","color","flexDirection","display","marginRight","getRandom","min","max","Math","floor","random","clearRoute","tbody","document","querySelector","i","children","length","tr","j","classList","contains","remove","clearWeights","innerHTML","clearWalls","clearBoard","Header","dispatch","useDispatch","algorithm","useSelector","state","globals","mazeType","graphAlgorithms","useRef","name","value","mazeGenerationAlgorithms","classes","AppBar","className","position","Toolbar","Typography","variant","onClick","window","location","reload","InputLabel","id","Select","labelId","onChange","event","type","changeAlgorithm","target","current","map","algo","MenuItem","key","changeMazeType","Button","vAlgorithm","Boolean","gutterBottom","Slider","aria-labelledby","defaultValue","getAriaValueText","toString","marks","step","valueLabelDisplay","root","flex","from","transform","to","table","overflow","borderSpacing","textAlign","animation","border","backgroundColor","RecursiveBackTracker","array","startIndex","this","maxi","maxj","visited","neighbours","temp","tempString","has","push","randomNeighbour","currentCell","trNodes","trLength","tdLength","add","stack","Set","plotCorners","pop","getRandomNeighbour","removeWalls","RandomizedPrims","maxRow","maxCol","res","x","y","walls","isValid","Array","fill","pushNeighboursToWalls","cnt","console","log","wallIndex","splice","left","right","top","bottom","randomPrims","RecursiveDivision","isHorizontalByUser","isHorizontal","undefined","width","height","getOrientation","currentX","currentY","passageX","passageY","e","divideGrid","arr","Queue","elements","element","isEmpty","shift","PathFindingAlgorithm","grid","source","destination","rows","cols","maxInt","weightNode","defaultWeight","Number","MAX_SAFE_INTEGER","shortestRoute","result","getParent","coordinates","getCoordinates","Node","distance","parent","BreathFirstSearch","visitedTemp","obj","row","col","node","queue","enqueue","isPathFound","front","dequeue","pathNodes","getShortestRoute","forEach","ele","GenericHeapAndMap","index","swapIndex","getDistance","parentIndex","swapElements","indexToSwap","tempIndex","getArrayIndex","setArrayIndex","leftRightIndex","isWall","arrayIndex","isWeight","HeapAndMap","dict","getKeyNotation","firstElement","lastElement","leftChildIndex","rightChildIndex","compareAndSwapElements","Dijkstras","q","neigbours","getNeigbourCoordinates","getNode","containsWall","resultNode","heapMap","currentNode","extractMin","getNeighbours","neighbour","setDistance","containsWeight","setParent","changePosition","f","g","h","openList","closedList","getf","AStar","getOpenListNode","goalCell","openListNode","getg","abs","getClosedListNode","setg","seth","setf","addClosedListNode","Nodes","trHeight","trWidth","tdRowListener","wpressed","currentTargetClassList","currentTarget","imgElement","createElement","setAttribute","weight","appendChild","addWeight","shouldMouseEnter","onMouseDown","onMouseUp","onMouseEnter","borderRadius","ColNodes","isMiddle","startNode","endNode","text","data-id","style","RowNodes","keyDownFunc","keyUpFunc","useEffect","bodyRef","plotOnGraph","removeEventListener","addEventListener","documentSource","documentDestination","dataset","split","parseInt","plotShortestRoute","keyCode","preventDefault","useMemo","ref","Graph","graphRef","useState","heightWidth","setHeightWidth","clientHeight","clientWidth","Info","main","App","hostname","match","initialState","animationSpeed","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3cf5db7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weight.d3a418ef.svg\";","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        header: {\n            padding: \"10px\",\n            maxWidth: \"100%\",\n            overflowX: \"auto\"\n        },\n        toolbar: {\n            \"& > *\": {\n                color: \"white\",\n                flexDirection: \"column\",\n                display: \"flex\",\n                marginRight: \"40px\"\n            }\n        }\n    })\n);\n","export const getRandom = (min: number, max: number) =>\n    Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport function clearRoute() {\n    const tbody = document.querySelector(\"tbody\") as HTMLTableSectionElement;\n\n    if (tbody) {\n        for (let i = 0; i < tbody.children.length; i++) {\n            const tr = tbody.children[i];\n\n            for (let j = 0; j < tr.children.length; j++) {\n                if (tr.children[j].classList.contains(\"route\")) {\n                    tr.children[j].classList.remove(\"route\");\n                }\n            }\n        }\n    }\n}\n\nexport function clearWeights() {\n    const tbody = document.querySelector(\"tbody\") as HTMLTableSectionElement;\n\n    if (tbody) {\n        for (let i = 0; i < tbody.children.length; i++) {\n            const tr = tbody.children[i];\n\n            for (let j = 0; j < tr.children.length; j++) {\n                if (tr.children[j].classList.contains(\"weight\")) {\n                    tr.children[j].innerHTML = \"\";\n                    tr.children[j].classList.remove(\"weight\");\n                }\n            }\n        }\n    }\n}\n\nexport function clearWalls() {\n    const tbody = document.querySelector(\"tbody\") as HTMLTableSectionElement;\n\n    if (tbody) {\n        for (let i = 0; i < tbody.children.length; i++) {\n            const tr = tbody.children[i];\n\n            for (let j = 0; j < tr.children.length; j++) {\n                if (tr.children[j].classList.contains(\"wall\")) {\n                    tr.children[j].classList.remove(\"wall\");\n                }\n            }\n        }\n    }\n}\n\nexport function clearBoard() {\n    const tbody = document.querySelector(\"tbody\") as HTMLTableSectionElement;\n\n    if (tbody) {\n        for (let i = 0; i < tbody.children.length; i++) {\n            const tr = tbody.children[i];\n\n            for (let j = 0; j < tr.children.length; j++) {\n                if (\n                    tr.children[j].classList.contains(\"route\") ||\n                    tr.children[j].classList.contains(\"wall\")\n                ) {\n                    tr.children[j].classList.remove(\"route\");\n                    tr.children[j].classList.remove(\"wall\");\n                }\n                if (tr.children[j].classList.contains(\"weight\")) {\n                    tr.children[j].innerHTML = \"\";\n                    tr.children[j].classList.remove(\"weight\");\n                }\n            }\n        }\n    }\n}\n","import React, { FunctionComponent, ChangeEvent, useRef } from \"react\";\nimport {\n    Slider,\n    AppBar,\n    Toolbar,\n    Typography,\n    Select,\n    MenuItem,\n    InputLabel,\n    Button\n} from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useStyles } from \"./styles\";\nimport { changeAlgorithm, changeMazeType, toggleVisualizeAlgorithm } from \"../../actions\";\nimport { RootState } from \"../../reducers\";\nimport { clearRoute, clearWeights, clearBoard, clearWalls } from \"../../commonUtilities\";\n\nconst Header: FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    const algorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    const toggleGraphAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        dispatch(changeAlgorithm(event.target.value as string));\n    };\n\n    const mazeType = useSelector((state: RootState) => state.globals.mazeType);\n\n    const toggleMazeGenerationAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        dispatch(changeMazeType(event.target.value as string));\n    };\n\n    const graphAlgorithms = useRef([\n        {\n            name: \"Breath First Search\",\n            value: \"BFS\"\n        },\n        {\n            name: \"Dijkstra's\",\n            value: \"Dijkstra's\"\n        },\n        {\n            name: \"A*\",\n            value: \"AStar\"\n        }\n    ]);\n\n    const mazeGenerationAlgorithms = useRef([\n        {\n            name: \"Recursive Division\",\n            value: \"recursiveDivision\"\n        }\n    ]);\n\n    function getAnimationSpeed(value: number) {\n        return value.toString();\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <AppBar className={classes.header} position=\"static\">\n                <Toolbar className={classes.toolbar}>\n                    <Typography\n                        className=\"cursor-pointer\"\n                        variant=\"h4\"\n                        onClick={() => window.location.reload()}\n                    >\n                        Pathfinding Visualizer\n                    </Typography>\n\n                    <div className=\"graphAlgorithms\">\n                        <InputLabel id=\"graphAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Algorithms</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"graphAlgorithms\"\n                            labelId=\"graphAlgorithmsLabel\"\n                            value={algorithm}\n                            onChange={toggleGraphAlgorithmFunc}\n                        >\n                            {graphAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <div className=\"mazeGenerationAlgorithms\">\n                        <InputLabel id=\"mazeGenerationAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Mazes</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"mazeGenerationAlgorithms\"\n                            labelId=\"mazeGenerationAlgorithmsLabel\"\n                            value={mazeType}\n                            onChange={toggleMazeGenerationAlgorithmFunc}\n                        >\n                            {mazeGenerationAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <Button\n                        variant=\"contained\"\n                        // @ts-ignore\n                        onClick={() => dispatch(toggleVisualizeAlgorithm(new Boolean(true)))}\n                    >\n                        Visualize\n                    </Button>\n\n                    <div>\n                        <Typography gutterBottom={true} id=\"animationSpeedSlider\">\n                            Animation Speed\n                        </Typography>\n                        <Slider\n                            aria-labelledby=\"animationSpeedSliderr\"\n                            defaultValue={30}\n                            getAriaValueText={getAnimationSpeed}\n                            marks={true}\n                            max={100}\n                            min={10}\n                            step={10}\n                            valueLabelDisplay=\"auto\"\n                        />\n                    </div>\n\n                    <Button color=\"secondary\" variant=\"contained\" onClick={clearRoute}>\n                        Clear Route\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\" onClick={clearWalls}>\n                        Clear Walls\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\" onClick={clearWeights}>\n                        Clear Weights\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\" onClick={clearBoard}>\n                        Clear Board\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default Header;\n","import {\n    AlgorithmType,\n    GlobalTypes,\n    CHANGE_ALGORITHM,\n    MazeType,\n    CHANGE_MAZE_TYPE,\n    AnimationSpeed,\n    CHANGE_ANIMATION_SPEED,\n    VISUALIZE_ALGORITHM,\n    VAlgorithm\n} from \"./types\";\n\nexport const changeAlgorithm = (algorithm: AlgorithmType): GlobalTypes => ({\n    algorithm,\n    type: CHANGE_ALGORITHM\n});\n\nexport const changeMazeType = (mazeType: MazeType): GlobalTypes => ({\n    mazeType,\n    type: CHANGE_MAZE_TYPE\n});\n\nexport const changeAnimationSpeed = (animationSpeed: AnimationSpeed): GlobalTypes => ({\n    animationSpeed,\n    type: CHANGE_ANIMATION_SPEED\n});\n\nexport const toggleVisualizeAlgorithm = (vAlgorithm: VAlgorithm): GlobalTypes => ({\n    vAlgorithm,\n    type: VISUALIZE_ALGORITHM\n});\n","export const CHANGE_ALGORITHM = \"CHANGE_ALGORITHM\";\nexport const CHANGE_MAZE_TYPE = \"CHANGE_MAZE_TYPE\";\nexport const CHANGE_ANIMATION_SPEED = \"CHANGE_ANIMATION_SPEED\";\nexport const VISUALIZE_ALGORITHM = \"VISUALIZE_ALGORITHM\";\n\nexport type AlgorithmType = string;\nexport type MazeType = string;\nexport type AnimationSpeed = number;\nexport type VAlgorithm = boolean;\n\nexport interface ChangeAlgorithm {\n    type: typeof CHANGE_ALGORITHM;\n    algorithm: AlgorithmType;\n}\n\nexport interface ChangeMazeType {\n    type: typeof CHANGE_MAZE_TYPE;\n    mazeType: MazeType;\n}\n\nexport interface ChangeAnimationSpeed {\n    type: typeof CHANGE_ANIMATION_SPEED;\n    animationSpeed: AnimationSpeed;\n}\n\nexport interface VisualizeAlgorithm {\n    type: typeof VISUALIZE_ALGORITHM;\n    vAlgorithm: VAlgorithm;\n}\n\nexport type GlobalTypes =\n    | ChangeAlgorithm\n    | ChangeMazeType\n    | ChangeAnimationSpeed\n    | VisualizeAlgorithm;\n\nexport interface GlobalState {\n    algorithm: AlgorithmType;\n    mazeType: MazeType;\n    animationSpeed: AnimationSpeed;\n    vAlgorithm: VAlgorithm;\n}\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flex: 1\n        },\n        \"@keyframes tdAnimation\": {\n            from: {\n                transform: \"scaleX(0)\"\n            },\n            to: {\n                transform: \"scaleX(1)\"\n            }\n        },\n        table: {\n            overflow: \"hidden\",\n            borderSpacing: 0,\n            \"& td\": {\n                textAlign: \"center\",\n                color: \"white\",\n                animation: \"$tdAnimation 1500ms\"\n            },\n            \"& td.wall\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                border: \"none !important\",\n                backgroundColor: \"#61dafb\"\n            },\n            \"& td.route\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                border: \"none !important\",\n                backgroundColor: \"lightgreen\"\n            },\n            \"& td.source\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                backgroundColor: \"green\"\n            },\n            \"& td.destination\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                backgroundColor: \"red\"\n            }\n        }\n    })\n);\n","import { getRandom } from \"../commonUtilities\";\n\nexport default class RecursiveBackTracker {\n    private readonly array: HTMLTableSectionElement;\n\n    private readonly startIndex: [number, number];\n\n    constructor(array: HTMLTableSectionElement, startIndex: [number, number]) {\n        this.array = array;\n        this.startIndex = startIndex;\n    }\n\n    getRandomNeighbour(i: number, j: number, maxi: number, maxj: number, visited: Set<string>) {\n        const neighbours: Array<any> = [];\n\n        if (i - 2 > 0) {\n            const temp = [i - 2, j];\n            const tempString = temp.toString();\n\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (i + 2 < maxi) {\n            const temp = [i + 2, j];\n            const tempString = temp.toString();\n\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (j - 2 > 0) {\n            const temp = [i, j - 2];\n            const tempString = temp.toString();\n\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (j + 2 < maxj) {\n            const temp = [i, j + 2];\n            const tempString = temp.toString();\n\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (!neighbours.length) {\n            return -1;\n        }\n        const randomIndex = getRandom(0, neighbours.length - 1);\n\n        return neighbours[randomIndex];\n    }\n\n    removeWalls(\n        randomNeighbour: [number, number],\n        currentCell: any,\n        trNodes: any,\n        trLength: number,\n        tdLength: number\n    ) {\n        if (randomNeighbour[1] > currentCell[1]) {\n            if (currentCell[1] + 1 < tdLength) {\n                trNodes[currentCell[0]].children[currentCell[1] + 1].classList.add(\"wall\");\n            }\n        } else if (randomNeighbour[0] > currentCell[0]) {\n            if (currentCell[0] + 1 < trLength) {\n                trNodes[currentCell[0] + 1].children[currentCell[1]].classList.add(\"wall\");\n            }\n        } else if (currentCell[1] > randomNeighbour[1]) {\n            if (randomNeighbour[1] + 1 < tdLength) {\n                trNodes[randomNeighbour[0]].children[randomNeighbour[1] + 1].classList.add(\"wall\");\n            }\n        } else if (currentCell[0] > randomNeighbour[0]) {\n            if (randomNeighbour[0] + 1 < trLength) {\n                trNodes[randomNeighbour[0] + 1].children[randomNeighbour[1]].classList.add(\"wall\");\n            }\n        }\n    }\n\n    plotCorners(trNodes: any, trLength: number, tdLength: number) {\n        const min = tdLength > trLength ? trLength : tdLength;\n\n        for (let i = 0; i < tdLength; i++) {\n            trNodes[0].children[i].classList.add(\"wall\");\n            trNodes[trLength - 1].children[i].classList.add(\"wall\");\n        }\n\n        for (let i = 0; i < trLength; i++) {\n            trNodes[i].children[0].classList.add(\"wall\");\n            trNodes[i].children[tdLength - 1].classList.add(\"wall\");\n        }\n    }\n\n    plotOnGraph() {\n        const trNodes = this.array.children;\n        const trLength = trNodes.length;\n        const tdLength = trNodes[0].children.length;\n\n        const stack: Array<any> = [];\n        const visited: Set<string> = new Set([]);\n\n        const i = this.startIndex[0];\n        const j = this.startIndex[1];\n\n        let currentCell = [i, j];\n\n        this.plotCorners(trNodes, trLength, tdLength);\n\n        visited.add(currentCell.toString());\n\n        stack.push(currentCell);\n\n        let isVisited = false;\n\n        while (stack.length) {\n            const temp = stack.pop();\n\n            if (temp) {\n                currentCell = temp;\n                const randomNeighbour = this.getRandomNeighbour(\n                    currentCell[0],\n                    currentCell[1],\n                    trLength,\n                    tdLength,\n                    visited\n                );\n\n                if (randomNeighbour !== -1) {\n                    isVisited = true;\n                    stack.push(currentCell);\n\n                    this.removeWalls(randomNeighbour, currentCell, trNodes, trLength, tdLength);\n\n                    visited.add(randomNeighbour.toString());\n\n                    stack.push(randomNeighbour);\n                }\n            }\n        }\n    }\n}\n","import { getRandom } from \"../commonUtilities\";\n\nexport default class RandomizedPrims {\n    private readonly array: HTMLTableSectionElement;\n\n    private readonly startIndex: [number, number];\n\n    private readonly maxRow: number;\n\n    private readonly maxCol: number;\n\n    private readonly trNodes: HTMLCollectionOf<Element>;\n\n    constructor(array: HTMLTableSectionElement, startIndex: [number, number]) {\n        this.array = array;\n        this.startIndex = startIndex;\n        this.trNodes = this.array.children;\n        this.maxRow = this.trNodes.length;\n        this.maxCol = this.trNodes[0].children.length;\n    }\n\n    isValid(res: Array<[number, number]>, x: number, y: number) {\n        if (x < 0 || y < 0 || x >= this.maxRow || y >= this.maxCol) {\n            return 0;\n        }\n\n        return res[x][y];\n    }\n\n    pushNeighboursToWalls(\n        res: Array<[number, number]>,\n        x: number,\n        y: number,\n        walls: Array<[number, number]>\n    ) {\n        if (this.isValid(res, x - 1, y)) {\n            walls.push([x - 1, y]);\n        }\n        if (this.isValid(res, x + 1, y)) {\n            walls.push([x + 1, y]);\n        }\n        if (this.isValid(res, x, y - 1)) {\n            walls.push([x, y - 1]);\n        }\n        if (this.isValid(res, x, y + 1)) {\n            walls.push([x, y + 1]);\n        }\n    }\n\n    randomPrims() {\n        const res = new Array(this.maxRow);\n        const walls: Array<[number, number]> = [];\n\n        for (let i = 0; i < this.maxRow; i++) {\n            res[i] = new Array(this.maxCol).fill(1);\n        }\n\n        const currentCell = [getRandom(0, this.maxRow - 1), getRandom(0, this.maxCol - 1)];\n\n        const [x, y] = currentCell;\n\n        res[x][y] = 0;\n\n        this.pushNeighboursToWalls(res, x, y, walls);\n\n        let cnt = 0;\n\n        while (walls.length !== 0) {\n            console.log(walls);\n\n            cnt += 1;\n\n            const wallIndex = getRandom(0, walls.length - 1);\n\n            const [x, y] = walls[wallIndex];\n\n            walls.splice(wallIndex, 1);\n\n            const left = this.isValid(res, x - 1, y);\n            const right = this.isValid(res, x + 1, y);\n            const top = this.isValid(res, x, y - 1);\n            const bottom = this.isValid(res, x, y + 1);\n\n            console.log(walls);\n\n            if (!right && left) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x - 1, y, walls);\n            } else if (!left && right) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x + 1, y, walls);\n            } else if (!bottom && top) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x, y - 1, walls);\n            } else if (!top && bottom) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x, y + 1, walls);\n            }\n        }\n        console.log(walls, res, cnt);\n\n        return res;\n    }\n\n    plotOnGraph() {\n        console.log(\"hi\");\n        const trNodes = this.array.children;\n\n        const res = this.randomPrims();\n\n        // Const res = generate({width: this.maxCol, height: this.maxCol});\n\n        // Console.log(res.length, res[0].length, this.maxRow, this.maxCol);\n        for (let i = 0; i < this.maxRow; i++) {\n            for (let j = 0; j < this.maxCol; j++) {\n                if (res[i][j] === 1) {\n                    trNodes[i].children[j].classList.add(\"wall\");\n                }\n            }\n        }\n    }\n}\n","import { getRandom } from \"../commonUtilities\";\n\nexport default class RecursiveDivision {\n    private readonly array: HTMLTableSectionElement;\n\n    private readonly maxRow: number;\n\n    private readonly maxCol: number;\n\n    private readonly trNodes: HTMLCollectionOf<Element>;\n\n    private isHorizontal: boolean;\n\n    private readonly isHorizontalByUser: boolean | undefined;\n\n    constructor(array: HTMLTableSectionElement, isHorizontalByUser?: boolean) {\n        this.array = array;\n        this.trNodes = this.array.children;\n        this.maxRow = this.trNodes.length;\n        this.maxCol = this.trNodes[0].children.length;\n        this.isHorizontalByUser = isHorizontalByUser;\n\n        this.isHorizontal = isHorizontalByUser !== undefined ? isHorizontalByUser : false;\n    }\n\n    getOrientation(width: number, height: number) {\n        if (width < height) {\n            this.isHorizontal = true;\n        } else if (height < width) {\n            this.isHorizontal = false;\n        } else {\n            getRandom(0, 1) === 0 ? (this.isHorizontal = true) : (this.isHorizontal = false);\n        }\n    }\n\n    divideGrid(res: Array<[number, number]>, x: number, y: number, height: number, width: number) {\n        if (width < 2 || height < 2) {\n            return;\n        }\n\n        this.getOrientation(width, height);\n\n        let currentX = this.isHorizontal ? x + getRandom(0, height - 1) : x;\n        let currentY = this.isHorizontal ? y : y + getRandom(0, width - 1);\n\n        const length = this.isHorizontal ? width : height;\n\n        const passageX = this.isHorizontal ? currentX : currentX + getRandom(0, height - 1);\n        const passageY = this.isHorizontal ? currentY + getRandom(0, width - 1) : currentY;\n\n        for (let i = 0; i < length; i++) {\n            if (!(currentX === passageX && currentY === passageY)) {\n                try {\n                    res[currentX][currentY] = 1;\n                } catch (e) {\n                    // Console.log(currentX, currentY);\n                }\n            }\n            if (this.isHorizontal) {\n                currentY += 1;\n            } else {\n                currentX += 1;\n            }\n        }\n\n        if (this.isHorizontal) {\n            const tempX = x;\n            const tempY = y;\n            const tempHeight = this.isHorizontal ? currentX - x : height;\n            const tempWidth = this.isHorizontal ? width : currentY - y;\n\n            // Console.log(x, y, currentX, currentY, width, height);\n\n            /*\n             * Console.log(x, y, currentY, currentX-y);\n             * console.log(x, y+currentX+1, currentY, height - currentX - 1);\n             */\n            if (currentX - y > 0) {\n                this.divideGrid(res, x, y, currentY, currentX - y);\n            }\n\n            if (y + currentX + 1 < this.maxRow) {\n                this.divideGrid(res, x, y + currentX + 1, currentY, height - currentX - 1);\n            }\n        } else {\n            /*\n             * Console.log(x, y, currentY-x, currentX);\n             * console.log(x + currentY+1, y, width - currentY -1, currentX);\n             */\n\n            if (currentY - x > 0) {\n                this.divideGrid(res, x, y, currentY - x, currentX);\n            }\n\n            if (x + currentY + 1 < this.maxCol) {\n                this.divideGrid(res, x + currentY + 1, y, width - currentY - 1, currentX);\n            }\n        }\n\n        /*\n         * TempX = this.isHorizontal ? currentX + 1 : x;\n         * tempY = this.isHorizontal ? y : currentY+1;\n         * tempHeight = this.isHorizontal ? height - currentX: height;\n         * tempWidth = this.isHorizontal ? width : width - currentY;\n         */\n\n        // This.divideGrid(res, tempX, tempY, tempHeight, tempWidth);\n    }\n\n    plotOnGraph() {\n        const arr = new Array(this.maxRow);\n\n        for (let i = 0; i < this.maxRow; i++) {\n            arr[i] = new Array(this.maxCol).fill(0);\n        }\n        this.divideGrid(arr, 0, 0, this.maxRow, this.maxCol);\n        for (let i = 0; i < this.maxRow; i++) {\n            for (let j = 0; j < this.maxCol; j++) {\n                if (arr[i][j] === 1) {\n                    this.trNodes[i].children[j].classList.add(\"wall\");\n                }\n            }\n        }\n    }\n}\n","export class Queue {\n    private readonly elements: Array<any>;\n\n    constructor() {\n        this.elements = [];\n    }\n\n    enqueue(element: any) {\n        this.elements.push(element);\n    }\n\n    dequeue() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        return this.elements.shift();\n    }\n\n    front() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        return this.elements[0];\n    }\n\n    isEmpty() {\n        return this.elements.length === 0;\n    }\n}\n","export class PathFindingAlgorithm {\n    protected readonly grid: HTMLTableSectionElement;\n\n    protected readonly source: [number, number];\n\n    protected readonly destination: [number, number];\n\n    protected readonly rows: number;\n\n    protected readonly cols: number;\n\n    protected readonly trNodes: HTMLCollectionOf<Element>;\n\n    protected readonly maxInt: number;\n\n    protected readonly weightNode: number;\n\n    protected readonly defaultWeight: number;\n\n    constructor(\n        grid: HTMLTableSectionElement,\n        source: [number, number],\n        destination: [number, number]\n    ) {\n        this.grid = grid;\n        this.source = source;\n        this.destination = destination;\n        this.trNodes = this.grid.children;\n        this.rows = this.trNodes.length;\n        this.cols = this.trNodes[0].children.length;\n        this.maxInt = Number.MAX_SAFE_INTEGER;\n        this.weightNode = 15;\n        this.defaultWeight = 1;\n    }\n\n    protected isValid(x: number, y: number) {\n        return !(x < 0 || y < 0 || x >= this.rows || y >= this.cols);\n    }\n\n    protected getNeigbourCoordinates(x: number, y: number) {\n        const array = [\n            {\n                x: x - 1,\n                y\n            },\n            {\n                x,\n                y: y - 1\n            },\n            {\n                x: x + 1,\n                y\n            },\n            {\n                x,\n                y: y + 1\n            }\n        ];\n\n        return array;\n    }\n\n    plotShortestRoute(shortestRoute: any) {\n        let result = shortestRoute;\n\n        if (result) {\n            while (result && result.getParent()) {\n                const coordinates = result.getCoordinates();\n\n                this.trNodes[coordinates.x].children[coordinates.y].classList.add(\"route\");\n                result = result.getParent();\n            }\n        }\n    }\n}\n","import { Queue } from \"../DataStructures/Queue\";\nimport { PathFindingAlgorithm } from \".\";\n\nclass Node {\n    private readonly x: number;\n\n    private readonly y: number;\n\n    private readonly distance: number;\n\n    private readonly parent: [number, number] | null;\n\n    constructor(x: number, y: number, distance: number, parent: [number, number] | null) {\n        this.x = x;\n        this.y = y;\n        this.distance = distance;\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n}\n\nexport class BreathFirstSearch extends PathFindingAlgorithm {\n    constructor(\n        grid: HTMLTableSectionElement,\n        source: [number, number],\n        destination: [number, number]\n    ) {\n        super(grid, source, destination);\n    }\n\n    getShortestRoute() {\n        if (\n            !(\n                this.source[0] <= this.rows &&\n                this.source[0] > 0 &&\n                this.destination[0] <= this.cols &&\n                this.destination[0] > 0\n            )\n        ) {\n            return null;\n        }\n        const array = new Array(this.rows);\n        const visited = new Array(this.rows);\n\n        for (let i = 0; i < this.rows; i++) {\n            const temp = [];\n            const visitedTemp = new Array(this.cols).fill(false);\n\n            for (let j = 0; j < this.cols; j++) {\n                const obj = { distance: 0, row: i, col: j };\n\n                if (i === this.source[0] && j === this.destination[0]) {\n                    obj.distance = 0;\n                }\n\n                if (this.trNodes[i].children[j].classList.contains(\"wall\")) {\n                    visitedTemp[j] = true;\n                }\n                temp.push(obj);\n            }\n            visited[i] = visitedTemp;\n            array[i] = temp;\n        }\n\n        const node = new Node(this.source[0], this.source[1], 0, null);\n\n        const queue = new Queue();\n\n        queue.enqueue(node);\n\n        let res;\n\n        let isPathFound = false;\n\n        while (!queue.isEmpty()) {\n            const front = queue.front();\n\n            queue.dequeue();\n\n            const { x, y, distance } = front;\n\n            if (x === this.destination[0] && y === this.destination[1]) {\n                isPathFound = true;\n                res = front;\n                break;\n            }\n\n            if (x - 1 > 0 && !visited[x - 1][y]) {\n                const node = new Node(x - 1, y, distance + 1, front);\n\n                queue.enqueue(node);\n                visited[x - 1][y] = true;\n            }\n\n            if (y - 1 > 0 && !visited[x][y - 1]) {\n                const node = new Node(x, y - 1, distance + 1, front);\n\n                queue.enqueue(node);\n                visited[x][y - 1] = true;\n            }\n\n            if (x + 1 < this.rows && !visited[x + 1][y]) {\n                const node = new Node(x + 1, y, distance + 1, front);\n\n                queue.enqueue(node);\n                visited[x + 1][y] = true;\n            }\n\n            if (y + 1 < this.cols && !visited[x][y + 1]) {\n                const node = new Node(x, y + 1, distance + 1, front);\n\n                queue.enqueue(node);\n                visited[x][y + 1] = true;\n            }\n        }\n\n        const pathNodes = [];\n\n        if (isPathFound) {\n            while (res.parent) {\n                pathNodes.push([res.x, res.y]);\n                res = res.parent;\n            }\n\n            return pathNodes;\n        }\n\n        return false;\n    }\n\n    plotShortestRoute() {\n        const res = this.getShortestRoute();\n\n        if (res) {\n            res.forEach((ele) => {\n                this.trNodes[ele[0]].children[ele[1]].classList.add(\"route\");\n            });\n        }\n    }\n}\n","export class GenericHeapAndMap {\n    protected readonly array: Array<any>;\n\n    constructor() {\n        this.array = [];\n    }\n\n    changePosition(index: number) {\n        let length = index;\n        let swapIndex = length;\n\n        try {\n            const distance = this.array[index].getDistance();\n\n            while (length) {\n                length = Math.floor((length - 1) / 2);\n\n                const parentIndex = length;\n\n                if (this.array[parentIndex].getDistance() > distance) {\n                    this.swapElements(parentIndex, swapIndex);\n                } else {\n                    break;\n                }\n                swapIndex = parentIndex;\n            }\n        } catch (e) {}\n    }\n\n    protected swapElements(index: number, indexToSwap: number) {\n        const temp = this.array[index];\n\n        const tempIndex = this.array[index].getArrayIndex();\n\n        this.array[index].setArrayIndex(this.array[indexToSwap].getArrayIndex());\n\n        this.array[index] = this.array[indexToSwap];\n\n        this.array[indexToSwap].setArrayIndex(tempIndex);\n\n        this.array[indexToSwap] = temp;\n    }\n\n    protected getKeyNotation(x: number, y: number) {\n        return `${x.toString()}-${y.toString()}`;\n    }\n\n    protected compareAndSwapElements(index: number, leftRightIndex: number) {\n        if (this.array[index].getDistance() > this.array[leftRightIndex].getDistance()) {\n            this.swapElements(index, leftRightIndex);\n\n            return leftRightIndex;\n        }\n\n        return false;\n    }\n\n    isEmpty() {\n        return this.array.length === 0;\n    }\n}\n","import { GenericHeapAndMap } from \"../HeapAndMap\";\n\nclass Node {\n    private readonly x: number;\n\n    private readonly y: number;\n\n    private distance: number;\n\n    private parent: Node | null;\n\n    private readonly isWall: boolean;\n\n    private arrayIndex: number;\n\n    private readonly isWeight: boolean;\n\n    constructor(\n        x: number,\n        y: number,\n        distance: number,\n        parent: Node | null,\n        isWall: boolean,\n        arrayIndex: number,\n        isWeight: boolean\n    ) {\n        this.x = x;\n        this.y = y;\n        this.distance = distance;\n        this.parent = parent;\n        this.isWall = isWall;\n        this.isWeight = isWeight;\n        this.arrayIndex = arrayIndex;\n    }\n\n    getArrayIndex() {\n        return this.arrayIndex;\n    }\n\n    setArrayIndex(index: number) {\n        this.arrayIndex = index;\n    }\n\n    getDistance() {\n        return this.distance;\n    }\n\n    getCoordinates() {\n        return { x: this.x, y: this.y };\n    }\n\n    setDistance(distance: number) {\n        this.distance = distance;\n    }\n\n    setParent(parent: Node | null) {\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    containsWall() {\n        return this.isWall;\n    }\n\n    containsWeight() {\n        return this.isWeight;\n    }\n}\n\nexport class HeapAndMap extends GenericHeapAndMap {\n    private readonly dict: { [key: string]: Node };\n\n    constructor() {\n        super();\n        this.dict = {};\n    }\n\n    add(\n        x: number,\n        y: number,\n        distance: number,\n        parent: Node | null,\n        isWall = false,\n        isWeight = false\n    ) {\n        const node = new Node(x, y, distance, parent, isWall, this.array.length, isWeight);\n\n        this.array.push(node);\n\n        this.dict[this.getKeyNotation(x, y)] = node;\n\n        let { length } = this.array;\n\n        let swapIndex = length - 1;\n\n        while (length) {\n            length = Math.floor((length - 1) / 2);\n\n            const parentIndex = length;\n\n            if (this.array[parentIndex].getDistance() > distance) {\n                this.swapElements(parentIndex, swapIndex);\n            } else {\n                break;\n            }\n            swapIndex = parentIndex;\n        }\n    }\n\n    changePosition(index: number) {\n        let length = index;\n        let swapIndex = length;\n\n        try {\n            const distance = this.array[index].getDistance();\n\n            while (length) {\n                length = Math.floor((length - 1) / 2);\n\n                const parentIndex = length;\n\n                if (this.array[parentIndex].getDistance() > distance) {\n                    this.swapElements(parentIndex, swapIndex);\n                } else {\n                    break;\n                }\n                swapIndex = parentIndex;\n            }\n        } catch (e) {}\n    }\n\n    contains(x: number, y: number) {\n        return this.getKeyNotation(x, y) in this.dict;\n    }\n\n    getNode(x: number, y: number) {\n        if (this.contains(x, y)) {\n            return this.dict[this.getKeyNotation(x, y)];\n        }\n\n        return null;\n    }\n\n    extractMin() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        const firstElement = this.array[0];\n\n        delete this.dict[\n            this.getKeyNotation(firstElement.getCoordinates().x, firstElement.getCoordinates().y)\n        ];\n\n        const lastElement = this.array.pop();\n\n        if (this.array.length && lastElement) {\n            this.array[0] = lastElement;\n        } else {\n            // Array is empty after popping last element\n            return firstElement;\n        }\n\n        let index = 0;\n\n        while (index < this.array.length) {\n            const leftChildIndex = 2 * index + 1;\n            const rightChildIndex = 2 * index + 2;\n\n            if (leftChildIndex >= this.array.length) {\n                break;\n            }\n\n            if (rightChildIndex >= this.array.length) {\n                if (this.compareAndSwapElements(index, leftChildIndex) !== false) {\n                    index = leftChildIndex;\n                } else {\n                    break;\n                }\n            } else if (\n                this.array[leftChildIndex].getDistance() <=\n                this.array[rightChildIndex].getDistance()\n            ) {\n                if (this.compareAndSwapElements(index, leftChildIndex) !== false) {\n                    index = leftChildIndex;\n                } else {\n                    break;\n                }\n            } else if (this.compareAndSwapElements(index, rightChildIndex) !== false) {\n                index = rightChildIndex;\n            } else {\n                break;\n            }\n        }\n\n        return firstElement;\n    }\n}\n","import { HeapAndMap } from \"./HeapAndMap\";\nimport { PathFindingAlgorithm } from \"..\";\n\nexport class Dijkstras extends PathFindingAlgorithm {\n    constructor(\n        grid: HTMLTableSectionElement,\n        source: [number, number],\n        destination: [number, number]\n    ) {\n        super(grid, source, destination);\n    }\n\n    private getNeighbours(q: HeapAndMap, x: number, y: number) {\n        const neigbours: Array<[number, number]> = [];\n\n        const array = this.getNeigbourCoordinates(x, y);\n\n        array.forEach((ele) => {\n            if (this.isValid(ele.x, ele.y)) {\n                const node = q.getNode(ele.x, ele.y);\n\n                if (node) {\n                    if (!node.containsWall()) {\n                        neigbours.push([ele.x, ele.y]);\n                    }\n                }\n            }\n        });\n\n        return neigbours;\n    }\n\n    getShortestRoute() {\n        if (\n            !(\n                this.source[0] <= this.rows &&\n                this.source[0] > 0 &&\n                this.destination[0] <= this.cols &&\n                this.destination[0] > 0\n            )\n        ) {\n            return null;\n        }\n\n        const heapMap = new HeapAndMap();\n\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n                if (this.trNodes[i].children[j].classList.contains(\"weight\")) {\n                    heapMap.add(i, j, this.maxInt, null, true, true);\n                } else if (this.trNodes[i].children[j].classList.contains(\"wall\")) {\n                    heapMap.add(i, j, this.maxInt, null, true);\n                } else if (this.source[0] === i && this.source[1] === j) {\n                    heapMap.add(i, j, 0, null);\n                } else {\n                    heapMap.add(i, j, this.maxInt, null);\n                }\n            }\n        }\n\n        let resultNode;\n\n        while (!heapMap.isEmpty()) {\n            const currentNode = heapMap.extractMin();\n\n            if (currentNode) {\n                const coordinates = currentNode.getCoordinates();\n\n                if (\n                    coordinates.x === this.destination[0] &&\n                    coordinates.y === this.destination[1]\n                ) {\n                    resultNode = currentNode;\n                    break;\n                }\n\n                const neighbours = this.getNeighbours(heapMap, coordinates.x, coordinates.y);\n\n                neighbours.forEach((neighbour) => {\n                    const node = heapMap.getNode(neighbour[0], neighbour[1]);\n\n                    if (node) {\n                        node.setDistance(\n                            currentNode.getDistance() +\n                                (node.containsWeight() ? this.weightNode : this.defaultWeight)\n                        );\n                        node.setParent(currentNode);\n                        heapMap.changePosition(node.getArrayIndex());\n                    }\n                });\n            }\n        }\n\n        return resultNode;\n    }\n\n    plotShortestRoute() {\n        super.plotShortestRoute(this.getShortestRoute());\n    }\n}\n","import { GenericHeapAndMap } from \"../HeapAndMap\";\n\nclass Node {\n    private readonly x: number;\n\n    private readonly y: number;\n\n    private f: number;\n\n    private g: number;\n\n    private h: number;\n\n    private parent: Node | null;\n\n    private readonly isWall: boolean;\n\n    private arrayIndex: number;\n\n    private readonly isWeight: boolean;\n\n    constructor(\n        x: number,\n        y: number,\n        f: number,\n        g: number,\n        h: number,\n        parent: Node | null,\n        isWall: boolean,\n        arrayIndex: number,\n        isWeight: boolean\n    ) {\n        this.x = x;\n        this.y = y;\n        this.f = f;\n        this.g = g;\n        this.h = h;\n        this.parent = parent;\n        this.isWall = isWall;\n        this.isWeight = isWeight;\n        this.arrayIndex = arrayIndex;\n    }\n\n    getArrayIndex() {\n        return this.arrayIndex;\n    }\n\n    setArrayIndex(index: number) {\n        this.arrayIndex = index;\n    }\n\n    getCoordinates() {\n        return { x: this.x, y: this.y };\n    }\n\n    setParent(parent: Node | null) {\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    setf(f: number) {\n        this.f = f;\n    }\n\n    seth(h: number) {\n        this.h = h;\n    }\n\n    setg(g: number) {\n        this.g = g;\n    }\n\n    getg() {\n        return this.g;\n    }\n\n    geth() {\n        return this.h;\n    }\n\n    getf() {\n        return this.f;\n    }\n\n    getDistance() {\n        return this.f;\n    }\n\n    containsWall() {\n        return this.isWall;\n    }\n\n    containsWeight() {\n        return this.isWeight;\n    }\n}\n\n// We are using manhattan distance because we are going traversing only four neighbours\nexport function getManhattanDistance(\n    currentCell: { x: number; y: number },\n    goalCell: { x: number; y: number }\n) {\n    return Math.abs(currentCell.x - goalCell.x) + Math.abs(currentCell.y - goalCell.y);\n}\n\nexport class HeapAndMap extends GenericHeapAndMap {\n    private readonly openList: { [key: string]: Node };\n\n    private readonly closedList: { [key: string]: Node };\n\n    constructor() {\n        super();\n        this.openList = {};\n        this.closedList = {};\n    }\n\n    add(\n        x: number,\n        y: number,\n        f: number,\n        g: number,\n        h: number,\n        parent: Node | null,\n        isWall = false,\n        isWeight = false\n    ) {\n        const node = new Node(x, y, f, g, h, parent, isWall, this.array.length, isWeight);\n\n        this.array.push(node);\n\n        this.openList[this.getKeyNotation(x, y)] = node;\n\n        let { length } = this.array;\n\n        let swapIndex = length - 1;\n\n        while (length) {\n            length = Math.floor((length - 1) / 2);\n\n            const parentIndex = length;\n\n            if (this.array[parentIndex].getf() > f) {\n                this.swapElements(parentIndex, swapIndex);\n            } else {\n                break;\n            }\n            swapIndex = parentIndex;\n        }\n    }\n\n    addClosedListNode(x: number, y: number, node: Node) {\n        this.closedList[this.getKeyNotation(x, y)] = node;\n    }\n\n    getClosedListNode(x: number, y: number): Node {\n        return this.closedList[this.getKeyNotation(x, y)];\n    }\n\n    private contains(x: number, y: number) {\n        return this.getKeyNotation(x, y) in this.openList;\n    }\n\n    getOpenListNode(x: number, y: number) {\n        if (this.contains(x, y)) {\n            return this.openList[this.getKeyNotation(x, y)];\n        }\n\n        return null;\n    }\n\n    extractMin() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        const firstElement = this.array[0];\n\n        delete this.openList[\n            this.getKeyNotation(firstElement.getCoordinates().x, firstElement.getCoordinates().y)\n        ];\n\n        const lastElement = this.array.pop();\n\n        if (!this.isEmpty() && lastElement) {\n            this.array[0] = lastElement;\n        } else {\n            // Array is empty after popping last element\n            return firstElement;\n        }\n\n        let index = 0;\n\n        while (index < this.array.length) {\n            const leftChildIndex = 2 * index + 1;\n            const rightChildIndex = 2 * index + 2;\n\n            if (leftChildIndex >= this.array.length) {\n                break;\n            }\n\n            if (rightChildIndex >= this.array.length) {\n                if (this.compareAndSwapElements(index, leftChildIndex) !== false) {\n                    index = leftChildIndex;\n                } else {\n                    break;\n                }\n            } else if (this.array[leftChildIndex].getf() <= this.array[rightChildIndex].getf()) {\n                if (this.compareAndSwapElements(index, leftChildIndex) !== false) {\n                    index = leftChildIndex;\n                } else {\n                    break;\n                }\n            } else if (this.compareAndSwapElements(index, rightChildIndex) !== false) {\n                index = rightChildIndex;\n            } else {\n                break;\n            }\n        }\n\n        return firstElement;\n    }\n}\n","import { HeapAndMap, getManhattanDistance } from \"./HeapAndMap\";\n\nimport { PathFindingAlgorithm } from \"..\";\n\nexport class AStar extends PathFindingAlgorithm {\n    constructor(\n        grid: HTMLTableSectionElement,\n        source: [number, number],\n        destination: [number, number]\n    ) {\n        super(grid, source, destination);\n    }\n\n    private getNeighbours(q: HeapAndMap, x: number, y: number) {\n        const array = this.getNeigbourCoordinates(x, y);\n        const neigbours: Array<[number, number]> = [];\n\n        array.forEach((ele) => {\n            if (this.isValid(ele.x, ele.y)) {\n                const node = q.getOpenListNode(ele.x, ele.y);\n\n                if (node) {\n                    if (!node.containsWall()) {\n                        neigbours.push([ele.x, ele.y]);\n                    }\n                }\n            }\n        });\n\n        return neigbours;\n    }\n\n    getShortestRoute() {\n        if (\n            !(\n                this.source[0] <= this.rows &&\n                this.source[0] > 0 &&\n                this.destination[0] <= this.cols &&\n                this.destination[0] > 0\n            )\n        ) {\n            return null;\n        }\n\n        const heapMap = new HeapAndMap();\n\n        heapMap.add(this.source[0], this.source[1], 0, 0, 0, null, false);\n\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n                if (this.trNodes[i].children[j].classList.contains(\"weight\")) {\n                    heapMap.add(i, j, this.maxInt, this.maxInt, this.maxInt, null, true, true);\n                } else if (this.trNodes[i].children[j].classList.contains(\"wall\")) {\n                    heapMap.add(i, j, this.maxInt, this.maxInt, this.maxInt, null, true);\n                } else if (this.source[0] === i && this.source[1] === j) {\n                    heapMap.add(i, j, 0, 0, 0, null);\n                } else {\n                    heapMap.add(i, j, this.maxInt, this.maxInt, this.maxInt, null);\n                }\n            }\n        }\n\n        let cnt = 0;\n\n        let resultNode;\n\n        while (!heapMap.isEmpty()) {\n            const currentNode = heapMap.extractMin();\n\n            cnt += 1;\n\n            if (currentNode) {\n                const coordinates = currentNode.getCoordinates();\n\n                if (\n                    coordinates.x === this.destination[0] &&\n                    coordinates.y === this.destination[1]\n                ) {\n                    resultNode = currentNode;\n                    break;\n                }\n\n                const neighbours = this.getNeighbours(heapMap, coordinates.x, coordinates.y);\n\n                for (const neighbour of neighbours) {\n                    const openListNode = heapMap.getOpenListNode(neighbour[0], neighbour[1]);\n\n                    const g =\n                        currentNode.getg() +\n                        (currentNode.containsWeight() ? this.weightNode : this.defaultWeight);\n                    const h = getManhattanDistance(\n                        { x: neighbour[0], y: neighbour[1] },\n                        { x: this.destination[0], y: this.destination[1] }\n                    );\n                    const f = g + h;\n\n                    const closedListNode = heapMap.getClosedListNode(neighbour[0], neighbour[1]);\n\n                    if (closedListNode) {\n                        continue;\n                    }\n\n                    if (openListNode) {\n                        if (openListNode.getf() < f) {\n                            continue;\n                        } else {\n                            openListNode.setg(g);\n                            openListNode.seth(h);\n                            openListNode.setf(f);\n                            openListNode.setParent(currentNode);\n                            heapMap.changePosition(openListNode.getArrayIndex());\n                        }\n                    }\n                }\n\n                heapMap.addClosedListNode(\n                    currentNode.getCoordinates().x,\n                    currentNode.getCoordinates().y,\n                    currentNode\n                );\n            }\n        }\n\n        return resultNode;\n    }\n\n    plotShortestRoute() {\n        super.plotShortestRoute(this.getShortestRoute());\n    }\n}\n","import React, { FunctionComponent, SyntheticEvent, useRef, useEffect, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useStyles } from \"./styles\";\nimport { RootState } from \"../../reducers\";\nimport RecursiveBackTracker from \"../../MazeGenerationAlgorithms/RecursiveBacktracker\";\nimport RandomizedPrims from \"../../MazeGenerationAlgorithms/RandomizedPrims\";\nimport RecursiveDivision from \"../../MazeGenerationAlgorithms/RecursiveDivision\";\nimport { BreathFirstSearch } from \"../../PathFindingAlgorithms/BreathFirstSearch\";\nimport { Dijkstras } from \"../../PathFindingAlgorithms/Dijkstras/Dijkstras\";\nimport { AStar } from \"../../PathFindingAlgorithms/A*/A*\";\nimport weight from \"../../assets/weight.svg\";\nimport { clearBoard, clearWeights } from \"../../commonUtilities\";\n\nconst Nodes: FunctionComponent<{ height: number; width: number }> = ({ height, width }) => {\n    const classes = useStyles();\n\n    let trHeight = 30;\n    let trWidth = 30;\n\n    const rows = Math.floor(height / trHeight);\n    const cols = Math.floor(width / trWidth);\n\n    function tdRowListener(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        if (dict.current.wpressed) {\n            addWeight(e);\n\n            return;\n        }\n\n        const currentTargetClassList = e.currentTarget.classList;\n        const classes = new Set(e.currentTarget.classList);\n\n        if (classes.has(\"source\") || classes.has(\"destination\") || classes.has(\"weight\")) {\n            return;\n        }\n\n        if (classes.has(\"wall\")) {\n            currentTargetClassList.remove(\"wall\");\n        } else {\n            currentTargetClassList.add(\"wall\");\n        }\n    }\n\n    let shouldMouseEnter = false;\n\n    const dict = useRef({ wpressed: false });\n\n    function onMouseDown(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        tdRowListener(e);\n\n        shouldMouseEnter = true;\n    }\n\n    function onMouseUp() {\n        shouldMouseEnter = false;\n    }\n\n    function onMouseEnter(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        if (shouldMouseEnter) {\n            tdRowListener(e);\n        }\n    }\n\n    function addWeight(e: SyntheticEvent) {\n        const currentTargetClassList = e.currentTarget.classList;\n        const classes = new Set(e.currentTarget.classList);\n\n        if (classes.has(\"source\") || classes.has(\"destination\")) {\n            return;\n        }\n\n        e.currentTarget.className = \"\";\n\n        if (!classes.has(\"weight\")) {\n            const imgElement = document.createElement(\"img\");\n\n            imgElement.setAttribute(\"src\", weight);\n            imgElement.setAttribute(\"width\", trWidth.toString());\n            imgElement.setAttribute(\"height\", trHeight.toString());\n\n            e.currentTarget.appendChild(imgElement);\n\n            currentTargetClassList.add(\"weight\");\n        } else {\n            e.currentTarget.innerHTML = \"\";\n            currentTargetClassList.remove(\"weight\");\n        }\n    }\n\n    const borderRadius = 1;\n\n    trWidth -= borderRadius * 4;\n    trHeight -= borderRadius * 4;\n\n    const ColNodes: FunctionComponent<{ row: number }> = ({ row }) => {\n        const res = [];\n        const isMiddle = row === Math.floor(rows / 2);\n        const startNode = Math.floor(cols / 4);\n        const endNode = startNode * 3;\n\n        let className = \"\";\n        let text = \"\";\n\n        for (let i = 0; i < cols; i++) {\n            if (isMiddle) {\n                if (startNode === i) {\n                    className = \"source\";\n                    text = \"S\";\n                } else if (endNode === i) {\n                    className = \"destination\";\n                    text = \"D\";\n                } else {\n                    className = \"\";\n                    text = \"\";\n                }\n            }\n            res.push(\n                <td\n                    key={`${row}-${i}`}\n                    className={className}\n                    data-id={`${row}-${i}`}\n                    style={{\n                        width: trWidth,\n                        height: trHeight,\n                        border: `${borderRadius}px solid blue`\n                    }}\n                    onMouseDown={onMouseDown}\n                    onMouseEnter={onMouseEnter}\n                    onMouseUp={onMouseUp}\n                >\n                    {text}\n                </td>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const RowNodes: FunctionComponent = () => {\n        const res = [];\n\n        for (let i = 0; i < rows; i++) {\n            res.push(\n                <tr key={i}>\n                    <ColNodes row={i} />\n                </tr>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const keyDownFunc = useRef<(e: any) => void>();\n\n    const keyUpFunc = useRef<(e: any) => void>();\n\n    const mazeType = useSelector((state: RootState) => state.globals.mazeType);\n\n    const algorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    const vAlgorithm = useSelector((state: RootState) => state.globals.vAlgorithm);\n\n    useEffect(() => {\n        if (bodyRef.current) {\n            clearBoard();\n            if (mazeType === \"recursiveBackTracker\") {\n                const recursiveBacktracker = new RecursiveBackTracker(bodyRef.current, [0, 0]);\n\n                recursiveBacktracker.plotOnGraph();\n            } else if (mazeType === \"randomizedPrims\") {\n                const randomizedPrims = new RandomizedPrims(bodyRef.current, [0, 0]);\n\n                randomizedPrims.plotOnGraph();\n            } else if (mazeType === \"recursiveDivision\") {\n                const recursiveDivision = new RecursiveDivision(bodyRef.current);\n\n                recursiveDivision.plotOnGraph();\n            }\n        }\n    }, [mazeType]);\n\n    useEffect(() => {\n        const unWeightAlgorithms = new Set([\"BFS\"]);\n\n        if (unWeightAlgorithms.has(algorithm)) {\n            clearWeights();\n\n            // @ts-ignore\n            window.removeEventListener(\"keydown\", keyDownFunc.current);\n\n            // @ts-ignore\n            window.removeEventListener(\"keyup\", keyUpFunc.current);\n        } else {\n            // @ts-ignore\n            window.addEventListener(\"keydown\", keyDownFunc.current);\n\n            // @ts-ignore\n            window.addEventListener(\"keyup\", keyUpFunc.current);\n        }\n    }, [algorithm]);\n\n    useEffect(() => {\n        if (bodyRef.current) {\n            const documentSource = document.querySelector(\".source\") as HTMLElement;\n            const documentDestination = document.querySelector(\".destination\") as HTMLElement;\n\n            const source: [number, number] = [0, 0];\n            const destination: [number, number] = [0, 0];\n\n            if (documentSource && documentSource.dataset.id) {\n                const [x, y] = documentSource.dataset.id.split(\"-\");\n\n                source[0] = parseInt(x);\n                source[1] = parseInt(y);\n            }\n\n            if (documentDestination && documentDestination.dataset.id) {\n                const [x, y] = documentDestination.dataset.id.split(\"-\");\n\n                destination[0] = parseInt(x);\n                destination[1] = parseInt(y);\n            }\n\n            if (algorithm === \"BFS\") {\n                const BFS = new BreathFirstSearch(bodyRef.current, source, destination);\n\n                BFS.plotShortestRoute();\n            } else if (algorithm === \"Dijkstra's\") {\n                const Dijkstra = new Dijkstras(bodyRef.current, source, destination);\n\n                Dijkstra.plotShortestRoute();\n            } else if (algorithm === \"AStar\") {\n                const AS = new AStar(bodyRef.current, source, destination);\n\n                AS.plotShortestRoute();\n            }\n        }\n    }, [vAlgorithm]);\n\n    useEffect(() => {\n        keyDownFunc.current = (e: any) => {\n            // W and w\n            if (e.keyCode === 119 || e.keyCode === 87) {\n                dict.current.wpressed = true;\n                e.preventDefault();\n            }\n        };\n\n        keyUpFunc.current = (e: any) => {\n            dict.current.wpressed = false;\n            e.preventDefault();\n        };\n    }, []);\n\n    const bodyRef = useRef<HTMLTableSectionElement>(null);\n\n    return useMemo(\n        () => (\n            <table className={classes.table}>\n                <tbody ref={bodyRef}>\n                    <RowNodes key=\"constant\" />\n                </tbody>\n            </table>\n        ),\n        []\n    );\n};\n\nexport default Nodes;\n","import React, { FunctionComponent, useRef, useEffect, useState } from \"react\";\nimport { useStyles } from \"./styles\";\nimport Nodes from \"./nodes\";\n\nconst Graph: FunctionComponent = () => {\n    const classes = useStyles();\n    const graphRef = useRef<HTMLDivElement>(null);\n\n    const [heightWidth, setHeightWidth] = useState([0, 0]);\n\n    useEffect(() => {\n        if (graphRef.current) {\n            setHeightWidth([graphRef.current.clientHeight, graphRef.current.clientWidth]);\n        }\n    }, []);\n\n    return (\n        <div ref={graphRef} className={classes.root}>\n            {heightWidth[0] > 0 && <Nodes height={heightWidth[0]} width={heightWidth[1]} />}\n        </div>\n    );\n};\n\nexport default Graph;\n","import React, { FunctionComponent } from \"react\";\n\nconst Info: FunctionComponent = () => <div />;\n\nexport default Info;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        main: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: \"10px\"\n        }\n    })\n);\n","import React, { ReactElement } from \"react\";\nimport Header from \"./components/header\";\nimport Graph from \"./components/graph\";\nimport Info from \"./components/Info\";\nimport { useStyles } from \"./AppStyles\";\n\nfunction App(): ReactElement {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Header />\n            <div className={classes.main}>\n                <Info />\n                <Graph />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_ALGORITHM,\n    CHANGE_MAZE_TYPE,\n    CHANGE_ANIMATION_SPEED,\n    VISUALIZE_ALGORITHM,\n    GlobalTypes,\n    GlobalState\n} from \"../actions/types\";\n\nconst initialState: GlobalState = {\n    algorithm: \"\",\n    animationSpeed: 50,\n    mazeType: \"\",\n    vAlgorithm: false\n};\n\nconst globals = (state = initialState, action: GlobalTypes): GlobalState => {\n    switch (action.type) {\n        case CHANGE_ALGORITHM: {\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        }\n        case CHANGE_MAZE_TYPE: {\n            return {\n                ...state,\n                mazeType: action.mazeType\n            };\n        }\n        case CHANGE_ANIMATION_SPEED: {\n            return {\n                ...state,\n                animationSpeed: action.animationSpeed\n            };\n        }\n        case VISUALIZE_ALGORITHM: {\n            return {\n                ...state,\n                vAlgorithm: action.vAlgorithm\n            };\n        }\n        default: {\n            return {\n                ...state\n            };\n        }\n    }\n};\n\nexport default globals;\n","import { combineReducers } from \"redux\";\n\nimport globals from \"./globals\";\n\nexport const rootReducer = combineReducers({\n    globals\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, {});\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport \"typeface-roboto\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}