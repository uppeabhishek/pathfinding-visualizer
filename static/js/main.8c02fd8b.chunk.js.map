{"version":3,"sources":["components/header/styles.ts","components/header/index.tsx","components/graph/styles.ts","components/graph/nodes.tsx","components/graph/index.tsx","components/Info/index.tsx","AppStyles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","header","padding","maxWidth","overflowX","toolbar","color","flexDirection","display","marginRight","Header","useState","graphAlgorithm","toggleGraphAlgorithm","mazeGenerationAlgorithm","toggleMazeGenerationAlgorithm","graphAlgorithms","useRef","name","value","mazeGenerationAlgorithms","classes","AppBar","className","position","Toolbar","Typography","variant","InputLabel","id","Select","labelId","onChange","event","target","current","map","algo","MenuItem","key","Button","gutterBottom","Slider","aria-labelledby","defaultValue","getAriaValueText","toString","marks","max","min","step","valueLabelDisplay","root","flex","table","overflow","borderSpacing","textAlign","border","backgroundColor","Nodes","height","width","trHeight","trWidth","rows","Math","floor","cols","tdRowListener","e","currentTargetClassList","currentTarget","classList","Set","has","remove","add","shouldMouseEnter","onMouseDown","onMouseUp","onMouseEnter","borderRadius","ColNodes","row","res","isMiddle","startNode","endNode","text","i","push","data-id","style","RowNodes","bodyRef","ref","Graph","graphRef","heightWidth","setHeightWidth","useEffect","clientHeight","clientWidth","Info","main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c02fd8b.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        header: {\n            padding: \"10px\",\n            maxWidth: \"100%\",\n            overflowX: \"auto\"\n        },\n        toolbar: {\n            \"& > *\": {\n                color: \"white\",\n                flexDirection: \"column\",\n                display: \"flex\",\n                marginRight: \"40px\"\n            }\n        }\n    })\n);\n","import React, { FunctionComponent, useState, ChangeEvent, useRef } from \"react\";\nimport {\n    Slider,\n    AppBar,\n    Toolbar,\n    Typography,\n    Select,\n    MenuItem,\n    InputLabel,\n    Button\n} from \"@material-ui/core\";\nimport { useStyles } from \"./styles\";\n\nconst Header: FunctionComponent = () => {\n    const [graphAlgorithm, toggleGraphAlgorithm] = useState(\"\");\n\n    const toggleGraphAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        toggleGraphAlgorithm(event.target.value as string);\n    };\n\n    const [mazeGenerationAlgorithm, toggleMazeGenerationAlgorithm] = useState(\"\");\n\n    const toggleMazeGenerationAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        toggleMazeGenerationAlgorithm(event.target.value as string);\n    };\n\n    const graphAlgorithms = useRef([\n        {\n            name: \"Depth First Search\",\n            value: \"DFS\"\n        },\n        {\n            name: \"A*\",\n            value: \"A*\"\n        }\n    ]);\n\n    const mazeGenerationAlgorithms = useRef([\n        {\n            name: \"Random\",\n            value: \"random\"\n        },\n        {\n            name: \"Recursive Backtracker\",\n            value: \"recursiveBackTracker\"\n        }\n    ]);\n\n    function getAnimationSpeed(value: number) {\n        return value.toString();\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <AppBar className={classes.header} position=\"static\">\n                <Toolbar className={classes.toolbar}>\n                    <Typography className=\"item title\" variant=\"h4\">\n                        Pathfinding Visualizer\n                    </Typography>\n\n                    <div className=\"item graphAlgorithms\">\n                        <InputLabel id=\"graphAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Algorithms</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"graphAlgorithms\"\n                            labelId=\"graphAlgorithmsLabel\"\n                            value={graphAlgorithm}\n                            onChange={toggleGraphAlgorithmFunc}\n                        >\n                            {graphAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <div className=\"item mazeGenerationAlgorithms\">\n                        <InputLabel id=\"mazeGenerationAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Mazes</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"mazeGenerationAlgorithms\"\n                            labelId=\"mazeGenerationAlgorithmsLabel\"\n                            value={mazeGenerationAlgorithm}\n                            onChange={toggleMazeGenerationAlgorithmFunc}\n                        >\n                            {mazeGenerationAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <Button variant=\"contained\">Visualize</Button>\n\n                    <div>\n                        <Typography gutterBottom={true} id=\"animationSpeedSlider\">\n                            Animation Speed\n                        </Typography>\n                        <Slider\n                            aria-labelledby=\"animationSpeedSliderr\"\n                            defaultValue={30}\n                            getAriaValueText={getAnimationSpeed}\n                            marks={true}\n                            max={100}\n                            min={10}\n                            step={10}\n                            valueLabelDisplay=\"auto\"\n                        />\n                    </div>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Route\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Weights\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Board\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default Header;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flex: 1\n        },\n        table: {\n            overflow: \"hidden\",\n            borderSpacing: 0,\n            \"& td\": {\n                textAlign: \"center\",\n                color: \"white\",\n                border: \"1px solid black\"\n            },\n            \"& td.selected\": {\n                backgroundColor: \"#61dafb\"\n            },\n            \"& td.source\": {\n                backgroundColor: \"green\"\n            },\n            \"& td.destination\": {\n                backgroundColor: \"red\"\n            }\n        }\n    })\n);\n","import React, { FunctionComponent, SyntheticEvent, useRef } from \"react\";\nimport { useStyles } from \"./styles\";\n\nconst Nodes: FunctionComponent<{ height: number; width: number }> = ({ height, width }) => {\n    const classes = useStyles();\n\n    let trHeight = 30;\n    let trWidth = 30;\n\n    const rows = Math.floor(height / trHeight);\n    const cols = Math.floor(width / trWidth);\n\n    function tdRowListener(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        const currentTargetClassList = e.currentTarget.classList;\n        const classes = new Set(e.currentTarget.classList);\n\n        if (classes.has(\"source\") || classes.has(\"destination\")) {\n            return;\n        }\n\n        if (classes.has(\"selected\")) {\n            currentTargetClassList.remove(\"selected\");\n        } else {\n            currentTargetClassList.add(\"selected\");\n        }\n    }\n\n    let shouldMouseEnter = false;\n\n    function onMouseDown(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        tdRowListener(e);\n        shouldMouseEnter = true;\n    }\n\n    function onMouseUp() {\n        shouldMouseEnter = false;\n    }\n\n    function onMouseEnter(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        if (shouldMouseEnter) {\n            tdRowListener(e);\n        }\n    }\n\n    const borderRadius = 1;\n\n    trWidth -= borderRadius * 4;\n    trHeight -= borderRadius * 4;\n\n    const ColNodes: FunctionComponent<{ row: number }> = ({ row }) => {\n        const res = [];\n        const isMiddle = row === Math.floor(rows / 2);\n        const startNode = Math.floor(cols / 4);\n        const endNode = startNode * 3;\n\n        let className = \"\";\n        let text = \"\";\n\n        for (let i = 0; i < cols; i++) {\n            if (isMiddle) {\n                if (startNode === i) {\n                    className = \"source\";\n                    text = \"S\";\n                } else if (endNode === i) {\n                    className = \"destination\";\n                    text = \"D\";\n                } else {\n                    className = \"\";\n                    text = \"\";\n                }\n            }\n            res.push(\n                <td\n                    key={`${row}${i}`}\n                    className={className}\n                    data-id={`${row}${i}`}\n                    style={{\n                        width: trWidth,\n                        height: trHeight,\n                        border: `${borderRadius}px solid black`\n                    }}\n                    onMouseDown={onMouseDown}\n                    onMouseEnter={onMouseEnter}\n                    onMouseUp={onMouseUp}\n                >\n                    {text}\n                </td>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const RowNodes: FunctionComponent = () => {\n        const res = [];\n\n        for (let i = 0; i < rows; i++) {\n            res.push(\n                <tr key={i}>\n                    <ColNodes row={i} />\n                </tr>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const bodyRef = useRef<HTMLTableSectionElement>(null);\n\n    return (\n        <table className={classes.table}>\n            <tbody ref={bodyRef}>\n                <RowNodes />\n            </tbody>\n        </table>\n    );\n};\n\nexport default Nodes;\n","import React, { FunctionComponent, useRef, useEffect, useState } from \"react\";\nimport { useStyles } from \"./styles\";\nimport Nodes from \"./nodes\";\n\nconst Graph: FunctionComponent = () => {\n    const classes = useStyles();\n    const graphRef = useRef<HTMLDivElement>(null);\n\n    const [heightWidth, setHeightWidth] = useState([0, 0]);\n\n    useEffect(() => {\n        if (graphRef.current) {\n            setHeightWidth([graphRef.current.clientHeight, graphRef.current.clientWidth]);\n        }\n    }, []);\n\n    return (\n        <div ref={graphRef} className={classes.root}>\n            {heightWidth[0] > 0 && <Nodes height={heightWidth[0]} width={heightWidth[1]} />}\n        </div>\n    );\n};\n\nexport default Graph;\n","import React, { FunctionComponent } from \"react\";\n\nconst Info: FunctionComponent = () => <div />;\n\nexport default Info;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        main: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: \"10px\"\n        }\n    })\n);\n","import React, { ReactElement } from \"react\";\nimport Header from \"./components/header\";\nimport Graph from \"./components/graph\";\nimport Info from \"./components/Info\";\nimport { useStyles } from \"./AppStyles\";\n\nfunction App(): ReactElement {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Header />\n            <div className={classes.main}>\n                <Info />\n                <Graph />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport \"typeface-roboto\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}