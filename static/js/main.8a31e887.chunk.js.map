{"version":3,"sources":["components/header/styles.ts","components/header/index.tsx","actions/index.ts","actions/types.ts","components/graph/styles.ts","commonUtilities.ts","MazeGenerationAlgorithms/RecursiveBacktracker.ts","MazeGenerationAlgorithms/RandomizedPrims.ts","MazeGenerationAlgorithms/RecursiveDivision.ts","DataStructures/Queue.ts","PathFindingAlgorithms/BreathFirstSearch.ts","DataStructures/HeapAndMap.ts","PathFindingAlgorithms/Dijkstras.ts","components/graph/nodes.tsx","components/graph/index.tsx","components/Info/index.tsx","AppStyles.ts","App.tsx","serviceWorker.ts","reducers/globals.ts","reducers/index.ts","store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","header","padding","maxWidth","overflowX","toolbar","color","flexDirection","display","marginRight","Header","dispatch","useDispatch","algorithm","useSelector","state","globals","mazeType","graphAlgorithms","useRef","name","value","mazeGenerationAlgorithms","classes","AppBar","className","position","Toolbar","Typography","variant","onClick","window","location","reload","InputLabel","id","Select","labelId","onChange","event","type","changeAlgorithm","target","current","map","algo","MenuItem","key","changeMazeType","Button","gutterBottom","Slider","aria-labelledby","defaultValue","getAriaValueText","toString","marks","max","min","step","valueLabelDisplay","root","flex","from","transform","to","table","overflow","borderSpacing","textAlign","animation","border","backgroundColor","getRandom","Math","floor","random","RecursiveBackTracker","array","startIndex","this","i","j","maxi","maxj","visited","neighbours","temp","tempString","has","push","length","randomNeighbour","currentCell","trNodes","trLength","tdLength","children","classList","add","stack","Set","plotCorners","pop","getRandomNeighbour","removeWalls","RandomizedPrims","maxRow","maxCol","res","x","y","walls","isValid","Array","fill","pushNeighboursToWalls","cnt","console","log","wallIndex","splice","left","right","top","bottom","randomPrims","RecursiveDivision","isHorizontalByUser","isHorizontal","undefined","width","height","getOrientation","currentX","currentY","passageX","passageY","e","divideGrid","arr","Queue","elements","element","isEmpty","shift","Node","distance","parent","BreathFirstSearch","grid","source","destination","rows","cols","maxInt","Number","MAX_SAFE_INTEGER","visitedTemp","obj","row","col","contains","node","queue","enqueue","isPathFound","front","dequeue","pathNodes","getShortestRoute","forEach","ele","isWall","arrayIndex","index","HeapAndMap","dict","indexToSwap","tempIndex","getArrayIndex","setArrayIndex","getKeyNotation","swapIndex","parentIndex","getDistance","swapElements","leftRightIndex","firstElement","getCoordinates","lastElement","leftChildIndex","rightChildIndex","compareAndSwapElements","Dijkstras","q","neigbours","getNode","containsWall","resultNode","heapMap","currentNode","extractMin","coordinates","getNeighbours","neighbour","setDistance","setParent","changePosition","result","getParent","Nodes","trHeight","trWidth","tdRowListener","currentTargetClassList","currentTarget","remove","shouldMouseEnter","onMouseDown","onMouseUp","onMouseEnter","borderRadius","ColNodes","isMiddle","startNode","endNode","text","data-id","style","RowNodes","useEffect","bodyRef","plotOnGraph","documentSource","document","querySelector","documentDestination","dataset","split","parseInt","plotShortestRoute","useMemo","ref","Graph","graphRef","useState","heightWidth","setHeightWidth","clientHeight","clientWidth","Info","main","App","Boolean","hostname","match","initialState","animationSpeed","clearRoute","clearBoard","clearWeights","vAlgorithm","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a31e887.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        header: {\n            padding: \"10px\",\n            maxWidth: \"100%\",\n            overflowX: \"auto\"\n        },\n        toolbar: {\n            \"& > *\": {\n                color: \"white\",\n                flexDirection: \"column\",\n                display: \"flex\",\n                marginRight: \"40px\"\n            }\n        }\n    })\n);\n","import React, { FunctionComponent, ChangeEvent, useRef } from \"react\";\nimport {\n    Slider,\n    AppBar,\n    Toolbar,\n    Typography,\n    Select,\n    MenuItem,\n    InputLabel,\n    Button\n} from \"@material-ui/core\";\nimport { useStyles } from \"./styles\";\nimport { changeAlgorithm, changeMazeType } from \"../../actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\n\nconst Header: FunctionComponent = () => {\n\n    const dispatch = useDispatch();\n\n    const algorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n    const toggleGraphAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        dispatch(changeAlgorithm(event.target.value as string));\n    };\n\n    const mazeType = useSelector((state: RootState) => state.globals.mazeType);\n\n    const toggleMazeGenerationAlgorithmFunc = (event: ChangeEvent<{ value: unknown }>) => {\n        dispatch(changeMazeType(event.target.value as string));\n    };\n\n    const graphAlgorithms = useRef([\n        {\n            name: \"Breath First Search\",\n            value: \"BFS\"\n        },\n        {\n            name: \"Dijkstra's\",\n            value: \"Dijkstra's\"\n        },\n        {\n            name: \"A*\",\n            value: \"A*\"\n        }\n    ]);\n\n    const mazeGenerationAlgorithms = useRef([\n        {\n            name: \"Recursive Division\",\n            value: \"recursiveDivision\"\n        }\n    ]);\n\n    function getAnimationSpeed(value: number) {\n        return value.toString();\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <AppBar className={classes.header} position=\"static\">\n                <Toolbar className={classes.toolbar}>\n                    <Typography className=\"cursor-pointer\" variant=\"h4\" onClick={() => window.location.reload()}>\n                        Pathfinding Visualizer\n                    </Typography>\n\n                    <div className=\"graphAlgorithms\">\n                        <InputLabel id=\"graphAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Algorithms</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"graphAlgorithms\"\n                            labelId=\"graphAlgorithmsLabel\"\n                            value={algorithm}\n                            onChange={toggleGraphAlgorithmFunc}\n                        >\n                            {graphAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <div className=\"mazeGenerationAlgorithms\">\n                        <InputLabel id=\"mazeGenerationAlgorithmsLabel\">\n                            <Typography variant=\"h6\">Mazes</Typography>\n                        </InputLabel>\n                        <Select\n                            id=\"mazeGenerationAlgorithms\"\n                            labelId=\"mazeGenerationAlgorithmsLabel\"\n                            value={mazeType}\n                            onChange={toggleMazeGenerationAlgorithmFunc}\n                        >\n                            {mazeGenerationAlgorithms.current.map((algo) => (\n                                <MenuItem key={algo.name} value={algo.value}>\n                                    {algo.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </div>\n\n                    <Button variant=\"contained\">Visualize</Button>\n\n                    <div>\n                        <Typography gutterBottom={true} id=\"animationSpeedSlider\">\n                            Animation Speed\n                        </Typography>\n                        <Slider\n                            aria-labelledby=\"animationSpeedSliderr\"\n                            defaultValue={30}\n                            getAriaValueText={getAnimationSpeed}\n                            marks={true}\n                            max={100}\n                            min={10}\n                            step={10}\n                            valueLabelDisplay=\"auto\"\n                        />\n                    </div>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Route\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Weights\n                    </Button>\n\n                    <Button color=\"secondary\" variant=\"contained\">\n                        Clear Board\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default Header;\n","import {\n    AlgorithmType,\n    GlobalTypes,\n    CHANGE_ALGORITHM,\n    MazeType,\n    CHANGE_MAZE_TYPE,\n    AnimationSpeed,\n    CHANGE_ANIMATION_SPEED,\n    CLEAR_ROUTE,\n    Route,\n    Weights,\n    CLEAR_WEIGHTS,\n    Board,\n    CLEAR_BOARD,\n    VISUALIZE_ALGORITHM,\n    VAlgorithm\n} from \"./types\";\n\nexport const changeAlgorithm = (algorithm: AlgorithmType): GlobalTypes => ({\n    algorithm,\n    type: CHANGE_ALGORITHM\n});\n\nexport const changeMazeType = (mazeType: MazeType): GlobalTypes => ({\n    mazeType,\n    type: CHANGE_MAZE_TYPE\n});\n\nexport const changeAnimationSpeed = (animationSpeed: AnimationSpeed): GlobalTypes => ({\n    animationSpeed,\n    type: CHANGE_ANIMATION_SPEED\n});\n\nexport const toggleClearRoute = (clearRoute: Route): GlobalTypes => ({\n    clearRoute,\n    type: CLEAR_ROUTE\n});\n\nexport const toggleClearWeights = (clearWeights: Weights): GlobalTypes => ({\n    clearWeights,\n    type: CLEAR_WEIGHTS\n});\n\nexport const toggleClearBoard = (clearBoard: Board): GlobalTypes => ({\n    clearBoard,\n    type: CLEAR_BOARD\n});\n\nexport const toggleVisualizeAlgorithm = (vAlgorithm: VAlgorithm): GlobalTypes => ({\n    vAlgorithm,\n    type: VISUALIZE_ALGORITHM\n});\n","export const CHANGE_ALGORITHM = \"CHANGE_ALGORITHM\";\nexport const CHANGE_MAZE_TYPE = \"CHANGE_MAZE_TYPE\";\nexport const CHANGE_ANIMATION_SPEED = \"CHANGE_ANIMATION_SPEED\";\nexport const CLEAR_ROUTE = \"CLEAR_ROUTE\";\nexport const CLEAR_WEIGHTS = \"CLEAR_WEIGHTS\";\nexport const CLEAR_BOARD = \"CLEAR_BOARD\";\nexport const VISUALIZE_ALGORITHM = \"VISUALIZE_ALGORITHM\";\n\nexport type AlgorithmType = string;\nexport type MazeType = string;\nexport type AnimationSpeed = number;\nexport type Route = boolean;\nexport type Weights = boolean;\nexport type Board = boolean;\nexport type VAlgorithm = boolean;\n\nexport interface ChangeAlgorithm {\n    type: typeof CHANGE_ALGORITHM;\n    algorithm: AlgorithmType;\n}\n\nexport interface ChangeMazeType {\n    type: typeof CHANGE_MAZE_TYPE;\n    mazeType: MazeType;\n}\n\nexport interface ChangeAnimationSpeed {\n    type: typeof CHANGE_ANIMATION_SPEED;\n    animationSpeed: AnimationSpeed;\n}\n\nexport interface ClearRoute {\n    type: typeof CLEAR_ROUTE;\n    clearRoute: Route;\n}\n\nexport interface ClearWeights {\n    type: typeof CLEAR_WEIGHTS;\n    clearWeights: Weights;\n}\n\nexport interface ClearBoard {\n    type: typeof CLEAR_BOARD;\n    clearBoard: Board;\n}\n\nexport interface VisualizeAlgorithm {\n    type: typeof VISUALIZE_ALGORITHM;\n    vAlgorithm: VAlgorithm;\n}\n\nexport type GlobalTypes =\n    | ChangeAlgorithm\n    | ChangeMazeType\n    | ChangeAnimationSpeed\n    | ClearRoute\n    | ClearWeights\n    | ClearBoard\n    | VisualizeAlgorithm;\n\nexport interface GlobalState {\n    algorithm: AlgorithmType;\n    mazeType: MazeType;\n    animationSpeed: AnimationSpeed;\n    clearWeights: Weights;\n    clearBoard: Board;\n    clearRoute: Route;\n    vAlgorithm: VAlgorithm;\n}\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flex: 1\n        },\n        \"@keyframes tdAnimation\": {\n            from: {\n                transform: \"scaleX(0)\"\n            },\n            to: {\n                transform: \"scaleX(1)\"\n            }\n        },\n        table: {\n            overflow: \"hidden\",\n            borderSpacing: 0,\n            \"& td\": {\n                textAlign: \"center\",\n                color: \"white\",\n                animation: \"$tdAnimation 1500ms\"\n            },\n            \"& td.selected\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                border: \"none !important\",\n                backgroundColor: \"#61dafb\"\n            },\n            \"& td.route\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                border: \"none !important\",\n                backgroundColor: \"lightgreen\"\n            },\n            \"& td.source\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                backgroundColor: \"green\"\n            },\n            \"& td.destination\": {\n                \"&:hover\": {\n                    transform: \"scale(1.5)\"\n                },\n                backgroundColor: \"red\"\n            }\n        }\n    })\n);\n","export const getRandom = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max-min+1)) + min;\n}","import { getRandom } from \"../commonUtilities\";\n\nexport default class RecursiveBackTracker {\n\n    private readonly array: HTMLTableSectionElement;\n    private readonly startIndex: [number, number];\n\n    constructor(array: HTMLTableSectionElement, startIndex: [number, number]) {\n        this.array = array;\n        this.startIndex = startIndex\n    }\n\n\n    getRandomNeighbour(i: number, j: number, maxi: number, maxj: number, visited: Set<string>) {\n        let neighbours: Array<any> = [];\n\n        if (i-2 > 0) {\n            const temp = [i-2, j], tempString = temp.toString();\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (i+2 < maxi) {\n            const temp = [i+2, j], tempString = temp.toString();\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (j-2 > 0) {\n            const temp = [i, j-2], tempString = temp.toString();\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (j+2 < maxj) {\n            const temp = [i, j+2], tempString = temp.toString();\n            if (!visited.has(tempString)) {\n                neighbours.push(temp);\n            }\n        }\n        if (!neighbours.length) {\n            return -1;\n        }\n        const randomIndex = getRandom(0, neighbours.length-1);\n        return neighbours[randomIndex];\n    }\n    \n    removeWalls(randomNeighbour: [number, number] , currentCell: any,\n             trNodes: any, trLength: number, tdLength: number) {\n\n        if (randomNeighbour[1] > currentCell[1]) {\n            if (currentCell[1]+1 < tdLength) {\n                trNodes[currentCell[0]].children[currentCell[1]+1].classList.add(\"selected\");\n            }\n        }\n\n        else if (randomNeighbour[0] > currentCell[0]) {\n            if (currentCell[0]+1 < trLength) {\n                trNodes[currentCell[0]+1].children[currentCell[1]].classList.add(\"selected\");\n            }\n        }\n\n        else if(currentCell[1] > randomNeighbour[1]) {\n            if (randomNeighbour[1]+1 < tdLength) {\n                trNodes[randomNeighbour[0]].children[randomNeighbour[1]+1].classList.add(\"selected\");\n            }\n        }\n\n        else if (currentCell[0] > randomNeighbour[0]) {\n            if (randomNeighbour[0]+1 < trLength) {\n                trNodes[randomNeighbour[0]+1].children[randomNeighbour[1]].classList.add(\"selected\");\n            }\n        }\n    }\n\n    plotCorners(trNodes: any, trLength: number, tdLength: number) {\n        const min = tdLength > trLength ? trLength : tdLength;\n        for (let i=0; i<tdLength; i++) {\n            trNodes[0].children[i].classList.add(\"selected\");\n            trNodes[trLength-1].children[i].classList.add(\"selected\");\n        }\n\n        for (let i=0;i<trLength; i++) {\n            trNodes[i].children[0].classList.add(\"selected\");\n            trNodes[i].children[tdLength-1].classList.add(\"selected\");\n        }\n    }\n\n    plotOnGraph() {\n        const trNodes = this.array.children;\n        const trLength = trNodes.length;\n        const tdLength = trNodes[0].children.length;\n        \n        const stack: Array<any> = [];\n        const visited: Set<string> = new Set([]);\n\n        let i = this.startIndex[0], j = this.startIndex[1];\n\n        let currentCell = [i, j];\n\n        this.plotCorners(trNodes, trLength, tdLength);\n\n        visited.add(currentCell.toString());\n\n        stack.push(currentCell);\n        \n        let isVisited = false;\n        while (stack.length) {\n            const temp = stack.pop();\n            if (temp) {\n                currentCell = temp;\n                const randomNeighbour = this.getRandomNeighbour(currentCell[0], currentCell[1], trLength, tdLength, visited);\n                if (randomNeighbour !== -1) {\n                    isVisited = true;\n                    stack.push(currentCell);\n\n                    this.removeWalls(randomNeighbour, currentCell, trNodes, trLength, tdLength);\n\n                    visited.add(randomNeighbour.toString());\n                    \n                    stack.push(randomNeighbour);\n                }\n            }\n        }\n    }\n}","import { getRandom } from \"../commonUtilities\";\n\nexport default class RandomizedPrims {\n\n    private readonly array: HTMLTableSectionElement;\n    private readonly startIndex: [number, number];\n    private readonly maxRow: number;\n    private readonly maxCol: number;\n    private readonly trNodes: HTMLCollectionOf<Element>;\n\n\n    constructor(array: HTMLTableSectionElement, startIndex: [number, number]) {\n        this.array = array;\n        this.startIndex = startIndex;\n        this.trNodes = this.array.children;\n        this.maxRow = this.trNodes.length;\n        this.maxCol = this.trNodes[0].children.length;\n    }\n\n    isValid(res: Array<[number, number]>, x: number, y: number) {\n        if (x<0 || y<0 || x >=this.maxRow || y>=this.maxCol) {\n            return 0;\n        }\n        return res[x][y];\n    }\n\n    pushNeighboursToWalls(res: Array<[number, number]>, x: number, y: number, walls: Array<[number, number]>) {\n\n        if (this.isValid(res, x-1, y)){\n            walls.push([x-1, y]);\n        }\n        if (this.isValid(res, x+1, y)){\n            walls.push([x+1,y]);\n        }\n        if (this.isValid(res, x, y-1)){\n            walls.push([x,y-1]);\n        }\n        if (this.isValid(res, x, y+1)){\n            walls.push([x,y+1]);\n        }\n    }\n\n    \n    randomPrims() {\n\n        const res  = new Array(this.maxRow);\n        const walls: Array<[number, number]> = [];\n\n        for (let i=0;i<this.maxRow; i++) {\n            res[i] = new Array(this.maxCol).fill(1);\n        }\n        \n        let currentCell = [getRandom(0, this.maxRow-1), getRandom(0, this.maxCol-1)];\n\n        const [x, y] = currentCell;\n\n        res[x][y] = 0;\n\n        this.pushNeighboursToWalls(res, x,y, walls);\n\n        let cnt = 0;\n\n        while (walls.length!==0) {\n            \n            console.log(walls);\n        \n            cnt+=1;\n\n            const wallIndex = getRandom(0, walls.length-1);\n            \n            const [x, y] = walls[wallIndex];\n\n            walls.splice(wallIndex, 1);\n\n            const left = this.isValid(res, x-1, y);\n            const right = this.isValid(res, x+1, y);\n            const top = this.isValid(res, x, y-1);\n            const bottom = this.isValid(res, x, y+1);\n            \n            console.log(walls);\n\n\n            if (!right && left) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x-1, y, walls);\n            }\n            else if (!left && right) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x+1, y,walls);\n            }\n            else if (!bottom && top) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x, y-1,  walls);\n            }\n            else if (!top && bottom) {\n                res[x][y] = 0;\n                this.pushNeighboursToWalls(res, x, y+1,  walls);\n            }\n        }\n        console.log(walls, res, cnt);\n        return res;\n    }\n\n    plotOnGraph() {\n        console.log(\"hi\");\n        const trNodes = this.array.children;\n\n        const res = this.randomPrims();\n        // const res = generate({width: this.maxCol, height: this.maxCol});\n\n        // console.log(res.length, res[0].length, this.maxRow, this.maxCol);\n        for (let i=0;i<this.maxRow;i++) {\n            for (let j=0;j<this.maxCol;j++) {\n                if (res[i][j] === 1) {\n                    trNodes[i].children[j].classList.add(\"selected\");\n                } \n            }\n        }\n    }\n}","import { getRandom } from \"../commonUtilities\";\n\nexport default class RecursiveDivision {\n\n    private readonly array: HTMLTableSectionElement;\n    private readonly maxRow: number;\n    private readonly maxCol: number;\n    private readonly trNodes: HTMLCollectionOf<Element>;\n    private isHorizontal: boolean;\n    private readonly isHorizontalByUser: boolean | undefined;\n\n\n    constructor(array: HTMLTableSectionElement, isHorizontalByUser?: boolean) {\n        this.array = array;\n        this.trNodes = this.array.children;\n        this.maxRow = this.trNodes.length;\n        this.maxCol = this.trNodes[0].children.length;\n        this.isHorizontalByUser = isHorizontalByUser;\n\n        this.isHorizontal = isHorizontalByUser!==undefined ? isHorizontalByUser : false;\n\n    }\n\n    getOrientation(width: number, height: number) {\n        if (width < height) {\n            this.isHorizontal = true;\n        }\n        else if(height < width) {\n            this.isHorizontal = false;\n        }\n        else {\n            getRandom(0, 1) === 0 ? this.isHorizontal = true : this.isHorizontal = false;\n        }\n    }\n\n    divideGrid(res: Array<[number, number]>, x: number, y: number, height: number, width: number) {\n        \n        if (width < 2 || height < 2) {\n            return;\n        }\n\n        this.getOrientation(width, height);\n\n        let currentX = this.isHorizontal ? x + getRandom(0, height-1) : x;\n        let currentY = this.isHorizontal ? y : y + getRandom(0, width-1);\n\n        const length = this.isHorizontal ? width : height;\n\n        const passageX = this.isHorizontal ? currentX : currentX + getRandom(0, height-1);\n        const passageY = this.isHorizontal ? currentY + getRandom(0, width-1) : currentY;\n\n\n        for (let i=0; i < length; i++) {\n            if (!(currentX === passageX && currentY === passageY)) {\n                try{\n                    res[currentX][currentY] = 1;\n                }\n                catch(e){\n                    // console.log(currentX, currentY);\n                }\n            }\n            if (this.isHorizontal) {\n                currentY+=1;\n            }\n            else{\n                currentX+=1;\n            }\n        }\n\n\n        if (this.isHorizontal) {\n            let tempX = x;\n            let tempY = y;\n            let tempHeight = this.isHorizontal ? currentX - x: height;\n            let tempWidth = this.isHorizontal ? width : currentY - y;\n\n            // console.log(x, y, currentX, currentY, width, height);\n\n            // console.log(x, y, currentY, currentX-y);\n            // console.log(x, y+currentX+1, currentY, height - currentX - 1);\n            if (currentX - y > 0) {\n                this.divideGrid(res, x, y, currentY, currentX-y);\n            }\n            \n            if (y+currentX+1 < this.maxRow) {\n                this.divideGrid(res, x, y+currentX+1, currentY, height - currentX - 1);\n            }\n        }\n        else {\n            \n            // console.log(x, y, currentY-x, currentX);\n            // console.log(x + currentY+1, y, width - currentY -1, currentX);\n\n            if (currentY-x > 0) {\n                this.divideGrid(res, x, y, currentY-x, currentX);\n            }\n\n            if (x+currentY+1 < this.maxCol) {\n                this.divideGrid(res, x + currentY+1, y, width - currentY -1, currentX);\n            }\n        }\n\n\n        // tempX = this.isHorizontal ? currentX + 1 : x;\n        // tempY = this.isHorizontal ? y : currentY+1;\n        // tempHeight = this.isHorizontal ? height - currentX: height;\n        // tempWidth = this.isHorizontal ? width : width - currentY;\n\n        // this.divideGrid(res, tempX, tempY, tempHeight, tempWidth);\n    }\n\n    plotOnGraph() {\n        const arr = new Array(this.maxRow);\n        \n        for (let i=0;i<this.maxRow; i++) {\n            arr[i] = new Array(this.maxCol).fill(0);\n        }\n        this.divideGrid(arr, 0, 0, this.maxRow, this.maxCol);\n        for (let i=0;i<this.maxRow; i++) {\n            for (let j=0;j<this.maxCol;j++){\n                if (arr[i][j] === 1) {\n                    this.trNodes[i].children[j].classList.add(\"selected\");\n                }\n            }\n        }\n    }\n}","\nexport class Queue \n{ \n    private readonly elements: Array<any>;\n\n    constructor() {   \n        this.elements = []; \n    } \n\n    enqueue(element: any) {     \n        this.elements.push(element); \n    } \n\n    dequeue()   { \n        if(this.isEmpty()) \n            return null; \n        return this.elements.shift(); \n    } \n\n    front() { \n        if(this.isEmpty()) \n            return null; \n        return this.elements[0]; \n    }\n\n    isEmpty() { \n        return this.elements.length === 0;\n    } \n\n}","import { Queue } from \"../DataStructures/Queue\";\n\nclass Node {\n    private readonly x: number;\n    private readonly y: number;\n    private readonly distance: number;\n    private readonly parent: [number, number]|null;\n\n    constructor(x: number, y: number, distance: number, parent: [number, number]|null) {\n        this.x = x;\n        this.y = y;\n        this.distance = distance;\n        this.parent = parent;\n    }\n    \n    getParent() {\n        return this.parent;\n    }\n}\n\nexport class BreathFirstSearch {\n    private readonly grid: HTMLTableSectionElement\n    private readonly source: [number, number];\n    private readonly destination: [number, number];\n    private readonly rows: number;\n    private readonly cols: number;\n    private readonly trNodes: HTMLCollectionOf<Element>;\n    private readonly maxInt: number;\n\n    constructor(grid: HTMLTableSectionElement, source: [number, number], destination: [number, number]) {\n        this.grid = grid;\n        this.source = source;\n        this.destination = destination;\n        this.trNodes = this.grid.children;\n        this.rows = this.trNodes.length;\n        this.cols = this.trNodes[0].children.length;\n        this.maxInt = Number.MAX_SAFE_INTEGER;\n    }\n    \n\n    getShortestRoute() {\n\n        if (!(this.source[0] <= this.rows && this.source[0] > 0 && this.destination[0] <= this.cols && this.destination[0] > 0)) {\n            return null;\n        }\n        const array = new Array(this.rows);\n        const visited = new Array(this.rows);\n\n        for (let i=0; i<this.rows; i++) {\n            const temp = [];\n            const visitedTemp = new Array(this.cols).fill(false);\n            for (let j=0;j<this.cols;j++) {\n                \n                const obj = {distance: 0, row: i, col: j};\n\n                if (i===this.source[0] && j===this.destination[0]) {\n                    obj.distance = 0;\n                }\n                \n                if (this.trNodes[i].children[j].classList.contains(\"selected\")) {\n                    visitedTemp[j] = true;\n                }\n                temp.push(obj);\n            }\n            visited[i] = visitedTemp;\n            array[i] = temp;\n        }\n\n\n\n        const node = new Node(this.source[0], this.source[1], 0, null);\n\n        const queue = new Queue();\n\n        queue.enqueue(node);\n        \n        let res;\n\n        let isPathFound = false;\n\n        while (!queue.isEmpty()) {\n            const front = queue.front();\n            queue.dequeue();\n                        \n            const {x, y, distance} = front;\n\n            if (x === this.destination[0] && y === this.destination[1]) {\n                isPathFound = true;\n                res = front;\n                break;\n            }\n            \n            if (x-1 > 0 && !visited[x-1][y]) {\n                const node = new Node(x-1, y, distance+1, front);\n                queue.enqueue(node);\n                visited[x-1][y] = true;\n            }\n\n            if (y-1 > 0 && !visited[x][y-1]) {\n                const node = new Node(x, y-1, distance+1, front);\n                queue.enqueue(node);\n                visited[x][y-1] = true;\n            }\n\n            if (x+1 < this.rows && !visited[x+1][y]) {\n                const node = new Node(x+1, y, distance+1, front);\n                queue.enqueue(node);\n                visited[x+1][y] = true;\n            }\n\n            if (y+1 < this.cols && !visited[x][y+1]) {\n                const node = new Node(x, y+1, distance+1, front);\n                queue.enqueue(node);\n                visited[x][y+1] = true;\n            }\n        }\n        \n        const pathNodes = [];\n\n        if (isPathFound) {\n            while (res.parent) {\n                pathNodes.push([res.x, res.y]);\n                res = res.parent;\n            }\n            return pathNodes;\n        }\n        return false;\n    }\n    \n    plotShortestRoute() {\n        const res = this.getShortestRoute();\n        if (res) {\n            res.forEach((ele) => {\n                this.trNodes[ele[0]].children[ele[1]].classList.add(\"route\");\n            });\n        }\n    }\n}","class Node {\n    private readonly x: number;\n    private readonly y: number;\n    private distance: number;\n    private parent: Node | null;\n    private readonly isWall: boolean;\n    private arrayIndex: number;\n\n    constructor(x: number, y: number, distance: number,parent: Node | null, isWall: boolean, arrayIndex: number) {\n        this.x = x;\n        this.y = y;\n        this.distance = distance;\n        this.parent = parent;\n        this.isWall = isWall;\n        this.arrayIndex = arrayIndex;\n    }\n\n    getArrayIndex() {\n        return this.arrayIndex;\n    }\n\n    setArrayIndex(index: number) {\n        this.arrayIndex = index;\n    }\n\n    getDistance() {\n        return this.distance;\n    }\n\n    getCoordinates() {\n        return {x: this.x, y: this.y};\n    }\n\n    setDistance(distance: number) {\n        this.distance = distance; \n    }\n\n    setParent(parent: Node | null) {\n        this.parent = parent;\n    }\n\n    getParent() {\n        return this.parent;\n    }\n\n    containsWall() {\n        return this.isWall;\n    }\n}\n\nexport class HeapAndMap {\n    private readonly array: Array<Node>;\n    private readonly dict: {[key: string]: Node};\n\n    constructor() {\n        this.array = [];\n        this.dict = {};\n    }\n\n    private swapElements(index: number, indexToSwap: number) {\n        const temp = this.array[index];\n\n        const tempIndex = this.array[index].getArrayIndex();\n\n        this.array[index].setArrayIndex(this.array[indexToSwap].getArrayIndex());\n\n        this.array[index] = this.array[indexToSwap];\n\n        this.array[indexToSwap].setArrayIndex(tempIndex);\n\n        this.array[indexToSwap] = temp;\n    }\n\n    add(x: number, y: number, distance: number, parent: Node | null, isWall: boolean = false) {\n        let node = new Node(x, y, distance, parent, isWall, this.array.length);\n\n        this.array.push(node);\n\n        this.dict[this.getKeyNotation(x,y)] = node;\n        \n        let length = this.array.length;\n\n        let swapIndex = length-1;\n        \n        while (length) {\n\n            length = Math.floor((length - 1) / 2);\n\n            const parentIndex = length;\n        \n            if (this.array[parentIndex].getDistance() > distance) {  \n                this.swapElements(parentIndex, swapIndex);\n            }\n            else {\n                break;\n            }\n            swapIndex = parentIndex;\n        }\n    }\n\n    changePosition(index: number) {\n\n        let length = index;\n        let swapIndex = length;\n\n        try{\n            let distance = this.array[index].getDistance();\n\n            while (length) {\n\n                length = Math.floor((length - 1) / 2);\n    \n                const parentIndex = length;\n                \n                if (this.array[parentIndex].getDistance() > distance) {  \n                    this.swapElements(parentIndex, swapIndex);\n                }\n                else {\n                    break;\n                }\n                swapIndex = parentIndex;\n            }\n        }\n        catch(e) {\n            console.log(index);\n        }\n\n    }\n\n    private compareAndSwapElements(index: number, leftRightIndex: number) {\n        if (this.array[index].getDistance() > this.array[leftRightIndex].getDistance()) {\n            this.swapElements(index, leftRightIndex);\n            return leftRightIndex;\n        }\n        return false;\n    }\n\n    getKeyNotation(x: number, y: number) {\n        return x.toString() + \"-\" + y.toString();\n    }\n\n    contains(x: number, y: number) {\n        return this.getKeyNotation(x,y) in this.dict;\n    }\n\n    getNode(x: number, y: number) {\n        if (this.contains(x, y)) {\n            return this.dict[this.getKeyNotation(x, y)];\n        }\n        return null;\n    }\n\n    extractMin() {\n        if (this.isEmpty()) {\n            return null;\n        }\n\n        const firstElement = this.array[0];\n\n        delete this.dict[this.getKeyNotation(firstElement.getCoordinates().x, firstElement.getCoordinates().y)];\n\n        const lastElement = this.array.pop();\n        \n        if (lastElement) {\n            this.array[0] = lastElement;\n        }\n        else {\n            // Array is empty after popping last element\n            return firstElement;\n        }\n\n        let index = 0;\n\n        while (index < this.array.length) {\n\n            const leftChildIndex = (2 * index) + 1;\n            const rightChildIndex = (2 * index) + 2;\n            \n            if (leftChildIndex >= this.array.length) {\n                break;\n            }\n\n            if (rightChildIndex >= this.array.length) {\n                if (this.compareAndSwapElements(index, leftChildIndex)!==false) {\n                    index = leftChildIndex;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                if (this.array[leftChildIndex].getDistance() <= this.array[rightChildIndex].getDistance()) {\n                    if (this.compareAndSwapElements(index, leftChildIndex) !== false) {\n                        index = leftChildIndex;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                else {\n                    if (this.compareAndSwapElements(index, rightChildIndex) !== false) {\n                        index = rightChildIndex;\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n\n        return firstElement;\n    }\n\n    isEmpty() {\n        return this.array.length === 0;\n    }\n}","import { HeapAndMap } from \"../DataStructures/HeapAndMap\";\n\nexport class Dijkstras {\n    private readonly grid: HTMLTableSectionElement\n    private readonly source: [number, number];\n    private readonly destination: [number, number];\n    private readonly rows: number;\n    private readonly cols: number;\n    private readonly trNodes: HTMLCollectionOf<Element>;\n    private readonly maxInt: number;\n\n    constructor(grid: HTMLTableSectionElement, source: [number, number], destination: [number, number]) {\n        this.grid = grid;\n        this.source = source;\n        this.destination = destination;\n        this.trNodes = this.grid.children;\n        this.rows = this.trNodes.length;\n        this.cols = this.trNodes[0].children.length;\n        this.maxInt = Number.MAX_SAFE_INTEGER;\n    }\n\n    private isValid(x: number, y: number) {\n        return !(x < 0 || y < 0 || x >= this.rows || y >= this.cols);\n    }\n\n    private getNeighbours(q: HeapAndMap, x: number, y: number) {\n        const neigbours: Array<[number, number]> = [];\n\n        const array = [\n            {\n                x: x-1,\n                y: y\n            },\n            {\n                x: x,\n                y: y-1\n            },\n            {\n                x: x+1,\n                y: y\n            },\n            {\n                x: x,\n                y: y+1\n            }\n        ];\n        \n        array.forEach((ele) => {\n            if (this.isValid(ele.x, ele.y)) {\n                const node = q.getNode(ele.x, ele.y);\n                if (node) {\n                    if (!node.containsWall()) {\n                        neigbours.push([ele.x, ele.y]);\n                    }\n                }\n            }\n        });\n        return neigbours;\n    }\n    \n    getShortestRoute() {\n        if (!(this.source[0] <= this.rows && this.source[0] > 0 && this.destination[0] <= this.cols && this.destination[0] > 0)) {\n            return null;\n        }\n\n        const heapMap = new HeapAndMap();\n\n        for (let i=0; i<this.rows; i++) {\n            for (let j=0;j<this.cols;j++) {\n                if (this.trNodes[i].children[j].classList.contains(\"selected\")) {\n                    heapMap.add(i, j, this.maxInt, null, true);\n                }\n                else {\n                    if (this.source[0] === i && this.source[1] === j){\n                        heapMap.add(i, j, 0, null);\n                    }\n                    else {\n                        heapMap.add(i, j, this.maxInt, null);\n                    }\n                }\n            }\n        }\n\n        let resultNode;\n\n        while (!heapMap.isEmpty()) {\n\n            const currentNode = heapMap.extractMin();\n\n            if (currentNode) {\n\n                const coordinates = currentNode.getCoordinates();\n\n                if (coordinates.x === this.destination[0] && coordinates.y === this.destination[1]) {\n                    resultNode = currentNode;\n                    break;\n                }\n                \n                const neighbours = this.getNeighbours(heapMap, coordinates.x, coordinates.y);\n                \n                neighbours.forEach((neighbour) => {\n                    const node = heapMap.getNode(neighbour[0], neighbour[1]);\n                    if (node) {\n                        node.setDistance(currentNode.getDistance() + 1);\n                        node.setParent(currentNode);\n                        heapMap.changePosition(node.getArrayIndex());\n                    }\n                });\n            }\n        }\n        return resultNode;\n    }\n\n    plotShortestRoute() {\n        let result = this.getShortestRoute();\n\n        if (result) {\n            while (result && result.getParent()) {\n                const coordinates = result.getCoordinates();\n                this.trNodes[coordinates.x].children[coordinates.y].classList.add(\"route\");\n                result = result.getParent();\n            }\n        }\n    }\n}","import React, { FunctionComponent, SyntheticEvent, useRef, useEffect, useMemo } from \"react\";\nimport { useStyles } from \"./styles\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../reducers\";\nimport RecursiveBackTracker from \"../../MazeGenerationAlgorithms/RecursiveBacktracker\";\nimport RandomizedPrims from \"../../MazeGenerationAlgorithms/RandomizedPrims\";\nimport RecursiveDivision from \"../../MazeGenerationAlgorithms/RecursiveDivision\";\nimport { BreathFirstSearch } from \"../../PathFindingAlgorithms/BreathFirstSearch\";\nimport { Dijkstras } from \"../../PathFindingAlgorithms/Dijkstras\";\n\n\nconst Nodes: FunctionComponent<{ height: number; width: number }> = ({ height, width }) => {\n    const classes = useStyles();\n\n    let trHeight = 30;\n    let trWidth = 30;\n\n    const rows = Math.floor(height / trHeight);\n    const cols = Math.floor(width / trWidth);\n\n    function tdRowListener(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        const currentTargetClassList = e.currentTarget.classList;\n        const classes = new Set(e.currentTarget.classList);\n\n        if (classes.has(\"source\") || classes.has(\"destination\")) {\n            return;\n        }\n\n        if (classes.has(\"selected\")) {\n            currentTargetClassList.remove(\"selected\");\n        } else {\n            currentTargetClassList.add(\"selected\");\n        }\n    }\n\n    let shouldMouseEnter = false;\n\n    function onMouseDown(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        tdRowListener(e);\n        shouldMouseEnter = true;\n    }\n\n    function onMouseUp() {\n        shouldMouseEnter = false;\n    }\n\n    function onMouseEnter(e: SyntheticEvent<HTMLTableDataCellElement>) {\n        if (shouldMouseEnter) {\n            tdRowListener(e);\n        }\n    }\n\n    const borderRadius = 1;\n\n    trWidth -= borderRadius * 4;\n    trHeight -= borderRadius * 4;\n\n    const ColNodes: FunctionComponent<{ row: number }> = ({ row }) => {\n        const res = [];\n        const isMiddle = row === Math.floor(rows / 2);\n        const startNode = Math.floor(cols / 4);\n        const endNode = startNode * 3;\n\n        let className = \"\";\n        let text = \"\";\n\n        for (let i = 0; i < cols; i++) {\n            if (isMiddle) {\n                if (startNode === i) {\n                    className = \"source\";\n                    text = \"S\";\n                } else if (endNode === i) {\n                    className = \"destination\";\n                    text = \"D\";\n                } else {\n                    className = \"\";\n                    text = \"\";\n                }\n            }\n            res.push(\n                <td\n                    key={`${row}-${i}`}\n                    className={className}\n                    data-id={`${row}-${i}`}\n                    style={{\n                        width: trWidth,\n                        height: trHeight,\n                        border: `${borderRadius}px solid blue`\n                    }}\n                    onMouseDown={onMouseDown}\n                    onMouseEnter={onMouseEnter}\n                    onMouseUp={onMouseUp}\n                >\n                    {text}\n                </td>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const RowNodes: FunctionComponent = () => {\n        const res = [];\n        for (let i = 0; i < rows; i++) {\n            res.push(\n                <tr key={i}>\n                    <ColNodes row={i} />\n                </tr>\n            );\n        }\n\n        return <>{res}</>;\n    };\n\n    const mazeType = useSelector((state: RootState) => state.globals.mazeType);\n    \n    const algorithm = useSelector((state: RootState) => state.globals.algorithm);\n\n\n    useEffect(() => {\n        if (bodyRef.current) {\n            if (mazeType === \"recursiveBackTracker\") {\n                const recursiveBacktracker = new RecursiveBackTracker(bodyRef.current, [0, 0]);\n                recursiveBacktracker.plotOnGraph();\n            }\n            else if (mazeType === \"randomizedPrims\") {\n                const randomizedPrims = new RandomizedPrims(bodyRef.current, [0, 0]);\n                randomizedPrims.plotOnGraph();\n            }\n            else if (mazeType === \"recursiveDivision\") {\n                const recursiveDivision = new RecursiveDivision(bodyRef.current);\n                recursiveDivision.plotOnGraph();\n            }\n        }\n    }, [mazeType]);\n\n    useEffect(()=>{\n        if (bodyRef.current) {\n            const documentSource = document.querySelector(\".source\") as HTMLElement;\n            const documentDestination = document.querySelector(\".destination\") as HTMLElement;\n\n            let source:[number, number] = [0,0], destination:[number, number]=[0,0];\n\n            if (documentSource && documentSource.dataset.id) {\n                const [x, y] = documentSource.dataset.id.split(\"-\");\n                source[0] = parseInt(x);\n                source[1] = parseInt(y);\n            }\n\n            if (documentDestination && documentDestination.dataset.id) {\n                const [x, y] = documentDestination.dataset.id.split(\"-\");\n                destination[0] = parseInt(x);\n                destination[1] = parseInt(y);\n            }\n\n            if (algorithm===\"BFS\") {\n                const BFS = new BreathFirstSearch(bodyRef.current, source, destination);\n                BFS.plotShortestRoute();\n            }\n            else if(algorithm === \"Dijkstra's\") {\n                const Dijkstra = new Dijkstras(bodyRef.current, source, destination);\n                Dijkstra.plotShortestRoute();\n            }\n        }\n\n    }, [algorithm]);\n\n    const bodyRef = useRef<HTMLTableSectionElement>(null);\n\n    return useMemo(() => {\n        return (\n            <table className={classes.table}>\n                <tbody ref={bodyRef}>\n                    <RowNodes key={\"constant\"} />\n                </tbody>\n            </table>\n        )\n    }, [])\n};\n\nexport default Nodes;\n","import React, { FunctionComponent, useRef, useEffect, useState } from \"react\";\nimport { useStyles } from \"./styles\";\nimport Nodes from \"./nodes\";\n\nconst Graph: FunctionComponent = () => {\n    const classes = useStyles();\n    const graphRef = useRef<HTMLDivElement>(null);\n\n    const [heightWidth, setHeightWidth] = useState([0, 0]);\n\n    useEffect(() => {\n        if (graphRef.current) {\n            setHeightWidth([graphRef.current.clientHeight, graphRef.current.clientWidth]);\n        }\n    }, []);\n\n    return (\n        <div ref={graphRef} className={classes.root}>\n            {heightWidth[0] > 0 && <Nodes height={heightWidth[0]} width={heightWidth[1]} />}\n        </div>\n    );\n};\n\nexport default Graph;\n","import React, { FunctionComponent } from \"react\";\n\nconst Info: FunctionComponent = () => <div />;\n\nexport default Info;\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        main: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: \"10px\"\n        }\n    })\n);\n","import React, { ReactElement } from \"react\";\nimport Header from \"./components/header\";\nimport Graph from \"./components/graph\";\nimport Info from \"./components/Info\";\nimport { useStyles } from \"./AppStyles\";\n\nfunction App(): ReactElement {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Header />\n            <div className={classes.main}>\n                <Info />\n                <Graph />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_ALGORITHM,\n    CHANGE_MAZE_TYPE,\n    CHANGE_ANIMATION_SPEED,\n    CLEAR_ROUTE,\n    CLEAR_BOARD,\n    CLEAR_WEIGHTS,\n    VISUALIZE_ALGORITHM,\n    GlobalTypes,\n    GlobalState\n} from \"../actions/types\";\n\nconst initialState: GlobalState = {\n    algorithm: \"\",\n    animationSpeed: 50,\n    mazeType: \"\",\n    clearRoute: false,\n    clearBoard: false,\n    clearWeights: false,\n    vAlgorithm: false\n};\n\nconst globals = (state = initialState, action: GlobalTypes): GlobalState => {\n    switch (action.type) {\n        case CHANGE_ALGORITHM: {\n            return {\n                ...state,\n                algorithm: action.algorithm\n            };\n        }\n        case CHANGE_MAZE_TYPE: {\n            return {\n                ...state,\n                mazeType: action.mazeType\n            };\n        }\n        case CHANGE_ANIMATION_SPEED: {\n            return {\n                ...state,\n                animationSpeed: action.animationSpeed\n            };\n        }\n        case CLEAR_ROUTE: {\n            return {\n                ...state,\n                clearRoute: action.clearRoute\n            };\n        }\n        case CLEAR_BOARD: {\n            return {\n                ...state,\n                clearBoard: action.clearBoard\n            };\n        }\n        case CLEAR_WEIGHTS: {\n            return {\n                ...state,\n                clearWeights: action.clearWeights\n            };\n        }\n        case VISUALIZE_ALGORITHM: {\n            return {\n                ...state,\n                vAlgorithm: action.vAlgorithm\n            };\n        }\n        default: {\n            return {\n                ...state\n            };\n        }\n    }\n};\n\nexport default globals;\n","import { combineReducers } from \"redux\";\n\nimport globals from \"./globals\";\n\nexport const rootReducer = combineReducers({\n    globals\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, {});\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport \"typeface-roboto\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n/*\n * If you want your app to work offline and load faster, you can change\n * unregister() to register() below. Note this comes with some pitfalls.\n * Learn more about service workers: https://bit.ly/CRA-PWA\n */\nserviceWorker.unregister();\n"],"sourceRoot":""}